#
#  Synopsis:
#	Summarize stats and duration in run/{flowd,bio4d}.{pid,stat} files.
#  Description:
#	Summarize the overall message flow by converting the contents of
#	status files in the directory
#
#		run/{flowd,bio4d}.{pid,stat}
#
#	to tab separated rows, suitable for parsing by shell scripts.  The
#	processes summarized are "bio4d" and "flowd", typically in either
#	directories ${BLOBIO_ROOT, SETSPACE_ROOT}/<schema>/*/run or
#	$BLOBIO_ROOT/sync/root/<remote-name>/run.
#
#	run-stat writes tab separated rows to standard out.
#
#		[bio4d|flowd] [UP|DOWN|ZOMBIE] <up-epoch>		\
#			<boot-ok> <boot-fail> 				\
#			<sample-ok> <sample-fail>
#
#	<boot> stats are since process start and <sample> is the most recent
#	sample stat, typically within 10 seconds.
#
#	<ok> is the total number correct requests, <fail> is the total number of
#	requests, possibly needing attention.
#
#	For bio4d, <fail> sums mundane client errors, timeouts, signals and
#	server-side panics. <ok> sums all syntactally correct requests by
#	clients, including requests for non-existant blobs.
#
#	For flowd, the stats sum the columns in the *.fdr records.  <ok>
#	is the sum of both process (exit code) and query execution (SQLSTATE)
#	status codes.  Typically, <ok> for a process (*.xdr) is the exit status
#	0, although the meaning of "OK" can be overridden in the etc/*.flow
#	file. Similary for sql queries, "OK" can be extened from "00000" to
#	other codes.  The <fail> counds are the complement of "OK" counts.
#	A common example of a failed SQL code would "23503" foreign key
#	violation, indicated a bug in the etc/*.flow file.
#	
#  Usage:
#	run-stat | ... sort | ... column
#
#	while sleep 60;  do
#		run-stat | put-to-db
#	done
#  See:
#	run-stat-report
#  Note:
#	Ambigous about definition of staleness of files in  run/*.
#	Probably ought to consult etc/profile for vars like
#	BLOBIO_BIO4D_RRD_DURATION or heartbeat duration.
#	
#	Really, really, really need to move the files in log/*.{qdr,xdr,fdr}
#	to directory data/ or spool/!
#
#	Probing process existence with pgrep might be useful.
#	Not clear if another script should do this.
#
STALE_AFTER=62

die()
{
	echo "$(basename $0): ERROR: $@" >&2
	exit 1
}

_cat_flowd()
{
	STAT_PATH=$1
	if [ -e $STAT_PATH ];  then
		BOOT=$(grep '^boot	' $STAT_PATH | cut -f2-4)
		SAMPLE=$(grep '^sample	' $STAT_PATH | cut -f2-4)
	else
		BOOT=""
		SAMPLE=""
	fi
	echo "$WHAT	$STATE	$SINCE	$BOOT	$SAMPLE"
}

_cat_bio4d()
{
	STAT_PATH=run/bio4d.stat
	if [ -e $STAT_PATH ];  then
		BOOT=$(
			run-stat-bio4d $STAT_PATH			|
			grep '^boot	'				|
			sed 's/.....//'
		)
		SAMPLE=$(
			run-stat-bio4d $STAT_PATH			|
			grep '^sample	' 				|
			sed 's/.......//'
		)
	else
		BOOT=""
		SAMPLE=""
	fi
	echo "$WHAT	$STATE	$SINCE	$BOOT	$SAMPLE"
}

_cat_run()
{
	WHAT=$1
	PID_PATH=$2
	SINCE=UNKNOWN

	stale-mtime $STALE_AFTER $PID_PATH
	STATUS=$?
	case $STATUS in
	0)
		SINCE=$(perl -e "print((stat('$PID_PATH'))[9]);")
		STATE=ZOMBIE
		;;
	1)
		STATE=UP
		SINCE=$(head -2 $PID_PATH | tail -1)
		;;
	2)
		STATE=DOWN
		;;
	*)
		die "stale-mtime failed: exit status=$?"
		;;
	esac

	case $WHAT in
	bio4d)
		_cat_bio4d
		;;
	flowd)
		_cat_flowd run/flowd.stat
		;;
	flowd/[a-z0-9]*)
		HOST=$(echo "$WHAT" | sed 's/......//')
		_cat_flowd sync/root/$HOST/run/flowd.stat 
		;;
	*)
		die "impossible what: $WHAT"
		;;
	esac
}

test $# = 0 || die "wrong number cli arguments: got $#, expected 0"

test -n "$BLOBIO_ROOT" || die "environment not defined: BLOBIO_ROOT"
cd $BLOBIO_ROOT || die "cd $BLOBIO_ROOT: exit status=$?"

_cat_run bio4d run/bio4d.pid
_cat_run flowd run/flowd.pid

#  check sync flowd process

find sync/root -name run -type d | while read RUN_DIR;  do
	HOST=$(basename $(dirname $RUN_DIR))
	_cat_run flowd/$HOST $RUN_DIR/flowd.pid 
done
