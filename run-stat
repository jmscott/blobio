#
#  Synopsis:
#	Summarize process stats and duration by examining *.{pid,stat} files.
#  Description:
#	Convert contents of status files in run/ directory to tab
#	separated row, suitable for parsing by shell scripts.  The
#	processes summarized are bio4d and flowd, typically in either
#	${BLOBIO_ROOT, SETSPACE_ROOT}/run or $BLOBIO_ROOT/sync/<host>/run
#	directories.
#
#	run-stat writes tab separated rows to standard out.
#
#		bio4d <state> <uptime> <request> <ok> <faults> <wall-duration>
#		flowd <state> <uptime> <request> <ok> <faults> <wall-duration>
#
#	where <request> is the count of either blob requests (for bio4d) or
#	flow description records (log/*.fdr).  <ok> is the total number
#	<ok> requests, <faults> is the total number of any class of error
#	needing attention, and wall duration is the accumlated time across
#	all requests, as a floating point number.
#  Usage:
#	run-stat
#
#	Writes to standard out
#
#		bio4d <state> <uptime> <request> <ok> <faults> <wall-duration>
#		flowd <state> <uptime> <request> <ok> <faults> <wall-duration>
#
#	where <request> is the count of eith blob requests (for bio4d) or
#	flow description records (log/*.fdr).
#  Note:
#	Need both the total since process boot AND the most recent sample!
#
#	Really, really, really need to move the files in log/*.{qdr,xdr,fdr}
#	to directory data/!
#
#	Probing process existence with pgrep might be useful.
#	Not clear if another script should do this.
#
STALE_AFTER=60

die()
{
	echo "$(basename $0): ERROR: $@" >&2
	exit 1
}

_cat_flowd()
{
	STAT=$1
	if [ -e $STAT ];  then
		BOOT=$(grep '^boot	' $STAT | sed 's/.....//')
		SAMPLE=$(grep '^sample	' $STAT | sed 's/.......//')
	else
		BOOT=""
		SAMPLE=""
	fi
	echo "$WHAT	$STATE	$SINCE	$BOOT	$SAMPLE"
}

_cat_run()
{
	WHAT=$1
	PID_PATH=$2
	SINCE=UNKNOWN

	stale-mtime $STALE_AFTER $PID_PATH
	STATUS=$?
	case $STATUS in
	0)
		SINCE=$(perl -e "print((stat('$PID_PATH'))[9]);")
		STATE=ZOMBIE
		;;
	1)
		STATE=UP
		SINCE=$(head -2 $PID_PATH | tail -1)
		;;
	2)
		STATE=DOWN
		;;
	*)
		die "stale-mtime failed: exit status=$?"
		;;
	esac

	case $WHAT in
	bio4d)
		echo "$WHAT	$STATE	$SINCE"
		;;
	flowd)
		_cat_stat run/flowd.stat
		;;
	flowd/[a-z0-9]*)
		STAT_PATH=$(echo "$WHAT" | sed 's/\//\/host')
		_cat_stat $STAT_PATH/run/flowd.stat 
		;;
	*)
		die "impossible what: $WHAT"
		;;
	esac
}

test $# = 0 || die "wrong number cli arguments: got $#, expected 0"

test -n "$BLOBIO_ROOT" || die "environment not defined: BLOBIO_ROOT"
cd $BLOBIO_ROOT || die "cd $BLOBIO_ROOT: exit status=$?"

_cat_run bio4d run/bio4d.pid
_cat_run flowd run/flowd.pid

#  check sync flowd process

find sync/host -name run -type d | while read RUN_DIR;  do
	HOST=$(basename $(dirname $RUN_DIR))
	_cat_run flowd/$HOST $RUN_DIR/flowd.pid 
done
