#/bin/bash
#
#  Synopsis:
#	Fetch all blobds in $BLOBIO_ROOT/data not in the blobio.service table.
#  Usage:
#  	fs-get
#  	fs-get --help
#  Exit Status:
#  	0	no errors
#  	1	error
#  Depends:
#	PATH=$JMSCOTT_ROOT/bin:$PATH:$BLOBIO_ROOT/sbin
#	$JMSCOTT_ROOT/bin/elapsed-english
#

START_EPOCH=$(date +'%s')
PROG=$(basename $0)

WORK_DIR=${TMPDIR:=/tmp}/$PROG-$$.d
PSQL='psql --quiet --no-psqlrc  --no-align  --tuples-only'

log()
{
	echo "$(date +'%Y/%m/%d %H:%M:%S'): $PROG #$$: $@"
}

die()
{
	log "ERROR: $@" >&2
	log "usage: $PROG [--help]"
	exit 1
}

WARN()
{
	log "WARN: $@"
}

help()
{
	#
	#  Burp the comments section above and exit.
	#
	#  Sorry about using perl for the absolute path.
	#  Mac OSX 10.7 doesn't support gnu readlink -f
	#
	ABSPATH=$(perl -MCwd=realpath -e "print realpath '$0'")
	awk '
		!/^ *#/ {
			exit
		}
		!/^# *!/
	' $ABSPATH | sed 's/^# *//'
	exit 0
}

leave()
{
	STATUS=$?

	cd .. || WARN "leave: work dir: cd .. failed: exit status=$?"
	#  zap the temp work dir
	test -d "$WORK_DIR" && (
		cd ..
		log "remove work dir: $WORK_DIR"
		rm -rf "$WORK_DIR" || WARN "rm work failed: exit status=%?"
	) || die "rm work dir failed: exit status=$?"

	log "good bye, cruel world: $(elapsed-english $START_EPOCH) elapsed"

	exit $STATUS
}

test "$1" = '--help' && help
test $# -ne 0 && die "wrong number of cli args: got $#, expected 0"

log hello, world
trap leave EXIT

test -n "$BLOBIO_ROOT" || die 'env not defined: BLOBIO_ROOT'
log "BLOBIO_ROOT: $BLOBIO_ROOT"
cd $BLOBIO_ROOT || die "cd BLOBIO_ROOT failed: exit status=$?"
. etc/profile || die "source etc/profile failed: exit status=$?"
log 'dump process env ...'
env

log "work dir: $WORK_DIR"
mkdir -p "$WORK_DIR" || die "mkdir work dir failed: $?"
cd $WORK_DIR || die :"cd work dir failed: exit status=$?"

#
#  Fetch the set of udigs from local file system.
#
log 'fetching udigs with fs2udig ...'
fs2udig | sort >FS.udig
STATUS=${PIPESTATUS[*]}
case $STATUS in
'0 0')
	log 'fs2udig no error'
	C=$(wc -l FS.udig | awk '{print $1}')
	case "$C" in
	0)
		WARN 'no blobs in file system'
		exit 0
		;;
	[1-9]*)
		log "fs2udig count: $C udigs"
		;;
	'')
		die 'output of fs2udig is empty'
		;;
	*)
		die "output of fs2udig is not a count: $C"
		;;
	esac
	;;
*)
	die "fs2udig | sort failed: exit status=$STATUS"
	;;
esac

#
#  Fetch the udigs from blobio.service table
#
log 'fetch udigs from table blobio.service ...'

#  unordered sort of service udigs.
#  to insure locales match, sort locally instead of database ordering.

$PSQL <<END
\\timing
\\o SERVICE.udig
SELECT
	blob
  FROM
  	blobio.service
;
END
STATUS=$?
test $STATUS = 0 || die "psql failed: status=$STATUS"

#
#  Sort the service udigs using the same sort order.
#
sort SERVICE.udig >SERVICE2.udig					||
	die "resort SERVICE.udig failed: exit status=$STATUS"
rm SERVICE.udig || die "rm presort SERVICE.udig failed: exit status=$?"

C=$(wc -l SERVICE2.udig | awk '{print $1}')
case "$C" in
0)
	WARN 'empty table blobio.service'
	;;
[1-9]*)
	log "table: blobio.service: row count: $C"
	;;
*)
	die "wc -l SERVICE2.udig failed: exit status=${PIPESTATUS[*]}"
	;;
esac

#
#  Find new blobs to eat
#
log 'comm: finding new blobs in file system only ...'
comm -2 -3 FS.udig SERVICE2.udig >GET.udig
STATUS=$?
test $STATUS = 0						||
	die "comm -2 -3 FS.udig SERVICE2.udig failed: exit status=$STATUS"

C=$(wc -l GET.udig | awk '{print $1}')

case "$C" in
0)
	log 'in sync: no new blobs to eat'
	exit 0
	;;
[1-9]*)
	log "now fs blobs to eat: $C blobs"
	;;
*)
	die "unexpected value for wc -l: GET.udig: $C"
	;;
esac

#
#  Get the undiscovered blobs
#
while read U;  do

	#
	#  Note:
	#	Do a "get" instead of "eat" to help remote sync which is too
	#	stupid to understand (for now) grok local transport.
	#
	blobio get --udig $U --service $BLOBIO_SERVICE --output-path /dev/null
	STATUS=$?
	case $STATUS in
	0)
		log "<$U"
		;;
	1)
		log "?$U"
		;;
	*)
		die "blobio eat $UDIG $BLOBIO_SERVICE failed: exit status=$?"
		;;
	esac
done <GET.udig

log 'finding blobs in service table not in file system ...'
comm -1 -3 FS.udig SERVICE2.udig | tr -d ' ' >NO_FS.udig
log "not in file system: $(wc -l NO_FS.udig | awk '{print $1}') blobs"

#
#  Eat the blobs in table blobio.service and NOT in file sytstem.
#
while read U;  do

	blobio get --udig $U --service $BLOBIO_SERVICE --output-path /dev/null
	STATUS=$?
	case $STATUS in
	0)
		WARN "unexpected: blob in fs: $U"
		;;
	1)
		log "?$U"
		;;
	*)
		die "blobio get $U failed: exit status=$STATUS"
		;;
	esac
done <NO_FS.udig
test $? = 0 || die "while NO_FS.udig failed: exit status: $?" 
