/*
 *  Synopsis:
 *  	Merge a json blob into sql table blobio.roll2stat_json.
 *  Usage:
 *	merge-stdin-roll2stat_json [json-udig] [size]
 *  Arguments:
 *  	1	udig of the json blob
 *  	2	number of bytes to read on the standard input
 *  Exit Status:
 *  	0	ok, tuple was merged
 *	1	unexpected error.
 *  Note:
 *	Create functions clang/udig.c and clang/int.c to parse udig and
 *	sizes.
 *
 *	Note clear how to write include path to epgc.c.
 *	Should the path be "jmscott/include/epgc.c"?
 */
//  Note: pare down #include!
#include <unistd.h>
#include <stdlib.h>

#include "jmscott/die.c"
#include "jmscott/posio.c"
#include "jmscott/ecpg.c"

static struct jmscott_ecpg_state_fault no_warn[] =
{
	{ "02000", -1},		//  no data for conflict on upsert/insert
	{(char *)0, 0}
};

char *jmscott_progname = "merge-stdin-roll2stat_json";

#define EXIT_OK		0
#define EXIT_FAULT	1

static void
die(char *msg)
{
	jmscott_die(EXIT_FAULT, msg);
}

static void
die2(char *msg1, char *msg2)
{
	jmscott_die2(EXIT_FAULT, msg1, msg2); 
}

int
main(int argc, char **argv)
{
	int size;
	size_t len;
	char *sz;

EXEC SQL BEGIN DECLARE SECTION;
	char *blob;
	char *doc;
EXEC SQL END DECLARE SECTION;

	if (argc != 3)
		die("wrong number of arguments");
	close(1);

	jmscott_ecpg_error_code = EXIT_FAULT;
	jmscott_ecpg_warn_code = EXIT_FAULT;

	/*
	 *  Parse a udig.
	 *
	 *	Note:
	 *		move udig parser to clang/udig.
	 */
	blob = argv[1];
	len = strlen(blob);
	if (len == 0)
		die("blob udig is empty");
	if (len < 34)
		die2("length of blob udig < 34 chars", blob);
	if (len > 255)
		die2("length of blob udig > 255 chars", blob);
	//  parse colon in udig.
	{
		char *colon = strchr(blob, ':');
		if (colon == NULL)
			die2("no colon in udig", blob);
		if (colon - blob >= 8)
			die2("colon occurs after > 8 chars", blob);
	}

	/*
	 *  Parse the uint63 blob size.
	 *
	 *	Note:
	 *		Move this code to $JMSCOTT_ROOT/include/
	 */
	sz = argv[2];
	len = strlen(sz);
	if (len < 1 || len > 19)
		die2("blob size not > 0 and < 20 chars", sz);

	//  need to validate that all chars are decimal digits
	size = atoi(sz);
	if (size <= 0)
		die2("atoi(blob size) <= 0", sz);

	//  allocate the json buffer plus null byte
	doc = malloc(size + 1);
	if (doc == NULL)
		die2("malloc() failed", sz);
	doc[size] = 0;

	if (jmscott_read_exact(0, doc, size) != 0)
		die2("read_exact(json) failed", sz);

	EXEC SQL
		WHENEVER SQLERROR CALL jmscott_ecpg_error(
			(struct jmscott_ecpg_state_fault *)0
	);
	EXEC SQL
		WHENEVER SQLWARNING CALL jmscott_ecpg_warning(no_warn)
	;
	EXEC SQL
		CONNECT TO default
	;
	EXEC SQL
		BEGIN TRANSACTION;

	EXEC SQL
	  CREATE TEMP TABLE roll_json
	  (
	  	blob	udig,
	  	doc	jsonb
	  )
	;

	/*
	 *  Merge blob into jsonorg.jsonb_255 table.
	 */
	EXEC SQL
	  INSERT INTO roll_json(
		blob,
		doc
	  ) VALUES (
		:blob::udig,
		:doc::jsonb
	  )
	;

	EXEC SQL
		END TRANSACTION
	;

	exit(EXIT_OK);
}
