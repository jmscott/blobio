#!/bin/bash
#
#  Synopsis:
#	Discover and eat missed blobs extracted from all brr logs in a wrap set.
#  Usage:
#	eat-wrap-missed <wrap udig>
#	eat-wrap-missed sha:e0b4a80cbb216958d5f47839dc99b7776e58af45
#	eat-wrap-missed $(blobio wrap --algorithm sha --service localhost:1797)
#
#  Description:
#	In real time, the brrflow server syncs the blobs with the blobio
#	database, by watching the traffic in spool/biod.brr.  In principle,
#	any blob fetchable via 'blobio get' should exist in the view
#	blobio.service and, vice-a-versa, for any blob not in view blob.service
#	a 'blobio get' call should fail.
#
#	Unfortunatly, for various reasons, the brr service can get out of sync
#	with the postgres database.  Fortunately, the brr logs can be replayed
#	in any order - assuming the brrflow.conf is designed correctly - so this
#	script issues a 'blobio eat' for all blobs unknown to the database,
#	triggering another discovery flow in the brrflow server.
#
#  Exit Status:
#	The exit status comprises a bit map of the various stages during the
#	sync with the postgres database.
#
#		--------0	wrap blob exists
#		-------0-	wrap blob is non empty
#
#		-----0--	all brr blobs exist
#		----0---	all brr blobs are non empty
#
#		---0----	all blobs extracted from brr records exist in db
#		--0-----	all eaten blobs exist
#
#	Roughly speaking, the bit indicates unexpected state.  In other words,
#	exit status == 0 implies the database is in harmony with the wrap set of
#	interest.   Here are all combinations of exit stati:
#
#		0 =000000	ok, all blobs already sunk
#
#		1 =000001	wrap blob does not exist
#
#		2 =000010	wrap blob is empty
#
#		4 =000100	some brr log blobs don't exist
#
#		8 =001000	some brr log blobs are empty
#
#		12=001100	some brr log blobs are empty,
#					some brr log blobs don't exist
#
#		16=010000	some blobs extracted from brr logs do not
#					exist in postgres database
#
#		20=010100	some blobs extracted from brr logs do not exist
#					in postgres database,
#					some brr blobs don't exist
#
#		24=011000	some blobs extracted from brr logs do not exist
#					in postgres database,
#					some brr blobs are empty
#
#		28=011100	some blobs extracted from brr logs do not exist
#					in postgres database,
#					some brr blobs are empty,
#					some brr blobs don't exist
#	
#		32=100000	some extracted blobs not in service (eat failed)
#
#		36=100100	some extracted blobs not in service(eat failed),
#					some brr log blobs don't exist
#
#		40=101000	some extracted blobs not in service(eat failed),
#					some brr log blobs are empty
#
#
#		44=101100	some extracted blobs not in service(eat failed),
#					some brr log blobs are empty,
#					some brr log blobs don't exist
#
#		48=110000	some extracted blobs not in service(eat failed),
#					some blobs extracted from brr logs do
#					not exist in postgres database
#
#		52=110100	some extracted blobs not in service(eat failed),
#					some blobs extracted from brr logs do
#					not exist in postgres database,
#					some brr log blobs don't exist
#					
#		56=111000	some extracted blobs not in service(eat failed),
#					some blobs extracted from brr logs do
#					not exist in postgres database,
#					some brr log blobs are empty
#
#		60=111100	some extracted blobs not in service(eat failed),
#					some blobs extracted from brr logs do
#					not exist in postgres database,
#					some brr log blobs are empty,
#					some brr log blobs don't exist
#
#		255		an invocation error or system fault
#  Blame:
#  	jmscott@setspace.com
#  	setspace@gmail.com
#  Note:
#	No checking for syntax of the wrap set or brr logs occurs.
#	Hopefully syntax error generates faults.  Hopefully.
#
#	Might be soon deprecated by cron-eat-new-unrolled.
#

PROG=$(basename $0)
TMPDIR=${TMPDIR:=/tmp}

declare -i								\
	EXIT_STATUS=0x0000						\
	WRAP_BLOB_EXIST_BIT=0x01					\
	WRAP_BLOB_NON_EMPTY_BIT=0x02					\
	ALL_BRR_BLOBS_EXIST_BIT=0x04					\
	ALL_BRR_BLOBS_NON_EMPTY_BIT=0x08				\
	ALL_BLOBS_IN_DB_BIT=0x10					\
	ALL_BLOBS_EXIST_BIT=0x20

#
#  All wrapped brr logs
#
WRAP_BRR=$TMPDIR/$PROG.wrap.$$.brr

#
#  All wrapped brr logs
#
BRR_LOGS=$TMPDIR/$PROG.$$.logs
BRR_LOG=$TMPDIR/$PROG.$$.brr

#
#  All the blobs/udigs in the brr logs of the entire wrap set
#
WRAP_BLOBS=${TMPDIR:=/tmp}/$PROG.wrap.$$.udig

#
#  Blobs in the wrap not not seen by the service
#
MISSED_BLOBS=${TMPDIR:=/tmp}/$PROG.missed.$$.udig

leave()
{
	STATUS=$?
	rm -f $WRAP_BRR $BRR_LOGS $BRR_LOG $WRAP_BLOBS $MISSED_BLOBS
	exit $STATUS
}

trap leave EXIT

die()
{
	echo "ERROR: $PROG: $@" >&2
	exit 255
}

warn()
{
	echo "WARN: $PROG: $@" >&2
}

get_brr_log()
{
	UDIG=$1
	blobio get --udig $UDIG --output-path $BRR_LOG --service $BLOBIO_SERVICE
	STATUS=$?
	case $STATUS in
	0)
		test -e $BRR_LOG ||
			die "PANIC: brr log file does not exist: $BRR_LOG"
		if [ ! -s $BRR_LOG ];  then
			warn "brr log: unexpected empty blob: $UDIG"
			EXIT_STATUS=$((EXIT_STATUS|ALL_BRR_BLOBS_NON_EMPTY_BIT))
		fi
		;;
	1)
		warn "brr log: blob not found: $UDIG"
		EXIT_STATUS=$((EXIT_STATUS | ALL_BRR_BLOBS_EXIST_BIT)
		;;
	*)
		die "blobio get $UDIG failed: exit status=$STATUS"
		;;
	esac
	cat $BRR_LOG
	rm $BRR_LOG
}

test $# = 1 || die "wrong number of arguments: got $#, expected 1"

test $BLOBIO_ROOT || die 'environment variable not defined: BLOBIO_ROOT'
cd $BLOBIO_ROOT || die "cd $BLOBIO_ROOT failed"

test $BLOBIO_SERVICE || die 'environment variable not defined: BLOBIO_SERVICE'

WRAP=$1
blobio get --udig $WRAP --service $BLOBIO_SERVICE --output-path $WRAP_BRR
STATUS=$?
case $STATUS in
0)
	#
	#  Note:
	#	Where is the test for an empty wrap blob!!!
	#
	if [ ! -s $WRAP_BRR ];  then
		warn "wrap: blob is empty: $WRAP"
		exit 2
	fi
	;;
1)
	warn "wrap: blob not found: $WRAP"
	exit 1
	;;
*)
	die "wrap: blobio eat $WRAP failed: exit status=$STATUS"
	;;
esac

#
#  Concatenate all the brr records in the wrap set, cut out the udigs of the
#  blobs and filter out duplicates in the result set.
#
#  Note:
#	We dont' test the exit status of this complex pipeline!!!
#
while read BRR_UDIG;  do
	get_brr_log $BRR_UDIG
done <$WRAP_BRR | cut -f 4 | perl -nle 'unless($hash{$_}++) {print}'>$WRAP_BLOBS
STATUS=${PIPESTATUS[*]}
test "$STATUS" = '0 0 0' || die "unexpected status extrating brr udigs: $STATUS"

test -e $WRAP_BLOBS || die "PANIC: no blobs in the wrap set: $WRAP_BLOBS"

#
#  Compare the set of all blobs extracted from the brr records against
#  what is already known in the database.
#
psql --quiet --file=lib/eat-wrap-missed.sql <$WRAP_BLOBS >$MISSED_BLOBS
STATUS=$?
test $STATUS -eq 0 || die "psql eat-wrap-missed.sql failed: status=$STATUS"
test -s $MISSED_BLOBS || exit $EXIT_STATUS

#
#  We have missed blobs
#
EXIT_STATUS=$((EXIT_STATUS | ALL_BLOBS_IN_DB_BIT))

while read MISSED;  do
	blobio eat --udig $MISSED --service $BLOBIO_SERVICE
	STATUS=$?
	case $STATUS in
	0)
		;;
	1)
		EXIT_STATUS=$((EXIT_STATUS | ALL_BLOBS_EXIST_BIT))
		warn "missed blob does not exist: $MISSED"
		;;
	*)
		die 255 "blobio eat $SERVICE failed: exit status=$STATUS"
		;;
	esac
done <$MISSED_BLOBS

exit $EXIT_STATUS
