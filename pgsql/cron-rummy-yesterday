#!/usr/bin/env bash
#
#  Synopsis:
#	Find unresolved blobs in service table, discovered after 'yesterday'
#  Usage:
#	export BLOBIO_ROOT=/opt/jmscott/jmsdesk/blobio
#	LOG=$BLOBIO_ROOT/log/cron-rummy-yesterday.log
#	* * * * * $BLOBIO_ROOT/sbin/cron-rummy-yesterday >>$LOG
#  Depends:
#	GNU date
#	github https://github.com/jmscott/work
#  Exit Status:
#	0	ok
#	1	error
#

START_TIME=$(RFC3339Nano)		#  Note: need $JMSCOTT_ROOT in PATH
START_EPOCH=$(date +'%s')

RUMMY_UDIG_SET=${TMPDIR:=/tmp}/$(basename $0)-$$.udig
#  store stats for txn log, since 
PSQL='psql --quiet --no-align --no-psqlrc --tuples-only'

log()
{
	echo "$(date +'%Y/%m/%d %H:%M:%S'): $@"
}

die()
{
	log "ERROR: $@" >&2
	exit 1
}

leave()
{
	rm -f $RUMMY_UDIG_SET || log "ERROR: rm -f $RUMMY_UDIG_SET failed" >&2
	log "good bye, cruel world: elapsed $(
		duration-english $(expr $(date +'%s') - $START_EPOCH)
	)"
}

test $# = 0 || die 'wrong number of arguments'
test -n "$BLOBIO_ROOT" || die 'var not defined: BLOBIO_ROOT'

log 'hello, world'
trap leave EXIT

log "BLOBIO_ROOT=$BLOBIO_ROOT"
cd $BLOBIO_ROOT || die "cd $BLOBIO_ROOT failed: exit status=$?"
. etc/profile

log "tmp rummy udig set: $RUMMY_UDIG_SET"
log "BLOBIO_SERVICE=$BLOBIO_SERVICE"
log "PATH=$PATH"
log "PGHOST=$PGHOST"
log "PGPORT=$PGPORT"
log "PGUSER=$PGUSER"
log "PGPASSWORD=$PGPASSWORD"
log "PGDATABASE=$PGDATABASE"

log 'fetching blobs from rummy ...'
$PSQL <<END || die "psql rummy yeserday failed: exit status=$?"
SELECT
	blob
  FROM
  	blobio.rummy
END

NO_SIZE_COUNT=$(wc -l $RUMMY_UDIG_SET | awk '{print $1}')
log "blobs with no brr_blob_size: $NO_SIZE_COUNT"

#  fetch each blob to trigger merge of row in table brr_blob_size

OK=0
NO=0
while read UDIG;  do
	blobio get							\
		--udig $UDIG						\
		--service $BLOBIO_SERVICE				\
		--output-path /dev/null
	STATUS=$?
	case $STATUS in
	0)
		log ">$UDIG"
		OK=$(($OK + 1))
		;;
	1)
		NO=$(($NO + 1))
		log "?$UDIG"
		;;
	*)
		die "blobio get /dev/null failed: exit status=$STATUS"
		;;
	esac
done <$RUMMY_UDIG_SET

TXN=spool/cron-rummy-yesterday.txn
log "transaction log: $TXN"
echo "$START_TIME	$(RFC3339Nano)	$SINCE_SEC	$OK	$NO" >>$TXN ||
	die "echo >txn failed: exit status=$?"

exit 0
