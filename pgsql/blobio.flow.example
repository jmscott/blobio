#
#  Synopsis:
#	Example configuration for maintaining database defined in schema.sql
#  Usage:
#  	brrflow server brrflow.conf
#  Blame:
#  	jmscott@setspace.com
#  	setspace@gmail.com
#

boot
{
	brr_capacity = 32;
	os_exec_capacity = 8;
	os_exec_worker_count = 16;
	flow_worker_count = 4;

	qdr_roll_duration = "24h";
	fdr_roll_duration = "24h";
	xdr_roll_duration = "24h";
	heartbeat_duration = "10s";
}

tail biod
{
	path = "spool/biod.brr";
}

command chat_ok
{
	path = "true";
}

command blob_on_network
{
	path = "true";
}

sql database blobio 
{
	driver_name = "postgres";
	data_source_name = "sslmode=disable";
	max_idle_conns = 1;
	max_open_conns = 64;
}

sql query blob_size_exists row
{
	result row is (
		answer bool
	);

	statement = `

	SELECT exists (
	  select
		blob
	    from
		blobio.brr_blob_size
	    where
		blob = $1::udig

	);
	
	`;
	database is blobio;
}

sql exec merge_blob_size
{
	statement = `

	INSERT into blobio.brr_blob_size(
		blob,
		byte_count
	) VALUES (
		$1::udig,
		$2::bigint
	)
	  ON CONFLICT do nothing
	;

	`;
	database is blobio;
}

sql query discover_older row
{
	result row is (
		is_older bool,
		row_exists bool
	);

	statement = `

	SELECT
	  (select
	  	start_time > $2::blobio.brr_timestamp
	      from
	    	blobio.brr_discover
	      where
	    	blob = $1::udig
	  ),

	  exists (
	    select
		blob
	    from
		blobio.brr_discover
	    where
		blob = $1::udig
	  )
	;

	`;
	database is blobio;
}

sql exec upsert_discover
{
	statement = `

	INSERT into blobio.brr_discover as RECENT (
		blob,
		start_time
	) VALUES (
		$1::udig,
		$2::blobio.brr_timestamp
	)
	  ON CONFLICT (blob) do update set
		start_time = EXCLUDED.start_time,
		upsert_time = now()
	  where
		RECENT.start_time > EXCLUDED.start_time
	;

	`;
	database is blobio;
}

sql query ok_newer row
{
	result row is (
		is_newer bool,
		row_exists bool
	);

	#
	#  Note:
	#	Why two attributes? Why not just test "is_newer" att for
	#	nullness instead?
	#
	statement = `

	SELECT
	  --  is the "ok" request record more recent?
	  (select
	  	$2::blobio.brr_timestamp > start_time
	    from
	    	blobio.brr_ok_recent
	    where
	    	blob = $1::udig
	  ),

	  --  does the record exists exist?

	  exists (
	    select
		blob
	      from
		blobio.brr_ok_recent
	    where
		blob = $1::udig
	  )
	;

	`;
	database is blobio;
}

sql exec upsert_ok_recent
{
	statement = `

	INSERT into blobio.brr_ok_recent as OLDER (
		blob,
		start_time,
		wall_duration
	) VALUES (
		$1::udig,
		$2::blobio.brr_timestamp,
		$3::blobio.brr_duration
	) ON CONFLICT (blob) do update set
		start_time =	EXCLUDED.start_time,
		wall_duration = EXCLUDED.wall_duration
	  where
		OLDER.start_time < EXCLUDED.start_time
	;
	
	`;
	database is blobio;
}

sql query no_newer row
{
	result row is (
		is_newer bool,
		row_exists bool
	);

	statement = `

	SELECT
	  --  is the brr more recent that tuple in table brr_no_recent?
	  (
	    select
	  	$2::blobio.brr_timestamp > start_time
	      from
	    	blobio.brr_no_recent
	      where
	    	blob = $1::udig
	  ),

	  --  does the brr tuple exist in table brr_no_recent?

	  exists (
	    select
		blob
	      from
		blobio.brr_no_recent
		    where
			blob = $1::udig
	  )
	;

	`;
	database is blobio;
}

#  the most recently seen "no" for the blob
sql exec upsert_no_recent
{
	database is blobio;

	statement = `

	INSERT into blobio.brr_no_recent as OLDER (
		blob,
		start_time,
		wall_duration
	) VALUES (
		$1::udig,
	      	$2::blobio.brr_timestamp,
		$3::blobio.brr_duration
	) ON CONFLICT (blob) do update
	  set
	      	start_time =	EXCLUDED.start_time,
		wall_duration = EXCLUDED.wall_duration
	  where
	  	OLDER.start_time < EXCLUDED.start_time
	;

	`;
}

sql query roll_ok_exists row
{
	database is blobio;

	result row is (
		answer bool
	);

	statement = `

	SELECT EXISTS (
		select
			blob
		  from
			blobio.brr_roll_ok
		  where
			blob = $1::udig
	);
	
	`;
}

sql exec merge_roll_ok
{
	database is blobio;

	statement = `

	INSERT into blobio.brr_roll_ok(
		blob,
		start_time,
		wall_duration
	) VALUES (
		$1::udig,
		$2::blobio.brr_timestamp,
		$3::blobio.brr_duration
	) ON CONFLICT do nothing;

	`;
}

sql query wrap_ok_exists row
{
	database is blobio;

	result row is (
		answer bool
	);

	statement = `

	SELECT exists (
	  select
		blob
	    from
		blobio.brr_wrap_ok
	    where
		blob = $1::udig
	);

	`;
}

sql exec merge_wrap_ok
{
	database is blobio;

	statement = `

	INSERT into blobio.brr_wrap_ok(
		blob,
		start_time,
		wall_duration
	) VALUES (
		$1::udig,
		$2::blobio.brr_timestamp,
		$3::blobio.brr_duration
	) ON CONFLICT do nothing;

	`;
}

sql query take_ok3_newer row
{
	database is blobio;

	result row is (
		is_newer bool,
		row_exists bool
	);

	statement = `

	SELECT
	  (
	    select
	  	$2::blobio.brr_timestamp > start_time
	      from
	    	blobio.brr_take_ok3_recent
	      where
	    	blob = $1::udig
	  ),
	  exists (
	    select
		blob
	      from
		blobio.brr_take_ok3_recent
	      where
		blob = $1::udig
	  )

	;
	`;
}

sql exec upsert_take_ok3_recent
{
	database is blobio;

	statement = `

	INSERT into blobio.brr_take_ok3_recent as OLDER (
		blob,
		start_time,
		wall_duration
	) VALUES (
		$1::udig,
		$2::blobio.brr_timestamp,
		$3::blobio.brr_duration
	)
	  on conflict (blob) do update set
		start_time = EXCLUDED.start_time,
		wall_duration = EXCLUDED.wall_duration
	  where
		OLDER.start_time < EXCLUDED.start_time
	;

	`;
}

call chat_ok()
  when
	biod.chat_history == "ok"
	or
	biod.chat_history == "ok,ok"
	or
	biod.chat_history == "ok,ok,ok"
;

call blob_on_network()
  when
	(
		biod.verb == "put"
		or
		biod.verb == "get"
		or
		biod.verb == "give"
		or
		biod.verb == "take"
		or
		biod.verb == "eat"
		or
		biod.verb == "wrap"
		or
		biod.verb == "roll"
	)
	and
	chat_ok.exit_status == 0
;

query blob_size_exists(biod.udig)
  when
  	blob_on_network.exit_status == 0
;

query merge_blob_size(biod.udig, biod.blob_size)
  when
  	blob_size_exists.answer == false
;

query discover_older(biod.udig, biod.start_time)
  when
  	chat_ok.exit_status == 0
;

query upsert_discover(biod.udig, biod.start_time)
  when
  	discover_older.is_older == true
	or
	discover_older.row_exists == false
;

query ok_newer(biod.udig, biod.start_time)
  when
  	biod.chat_history == "ok,ok"
	or
	biod.chat_history == "ok"
;

query upsert_ok_recent(biod.udig, biod.start_time, biod.wall_duration)
  when
  	ok_newer.row_exists == false
	or
	ok_newer.is_newer == true
;

query no_newer(biod.udig, biod.start_time)
  when
  	biod.chat_history == "no"
;

query upsert_no_recent(biod.udig, biod.start_time, biod.wall_duration)
  when
	no_newer.row_exists == false
	or
	no_newer.is_newer == true
;

query roll_ok_exists(biod.udig)
  when
  	biod.verb == "roll"
	and
	biod.chat_history == "ok"
;

query merge_roll_ok(biod.udig, biod.start_time, biod.wall_duration)
  when
  	roll_ok_exists.answer == false
;

query wrap_ok_exists(biod.udig)
  when
  	biod.verb == "wrap"
	and
	biod.chat_history == "ok"
;

query merge_wrap_ok(biod.udig, biod.start_time, biod.wall_duration)
  when
  	wrap_ok_exists.answer == false
;

query take_ok3_newer(biod.udig, biod.start_time)
  when
  	biod.verb == "take"
	and
	biod.chat_history == "ok,ok,ok"
;

query upsert_take_ok3_recent(biod.udig, biod.start_time, biod.wall_duration)
  when
  	take_ok3_newer.row_exists == false
	or
	take_ok3_newer.is_newer == true
;
