#!/bin/bash
#
#  Synopsis:
#	Eat all unrolled blobs
#  Blame:
#  	jmscott@setspace.com
#  	setspace@gmail.com

HELP=$(cat <<'END'
Synopsis:
	Eat all raw/undigested blobs discovered by unrolling all wrap sets
Exit Status:
	0	no errors
	1	no new blobs
	2	unfetchable wrap set blob
	255	system error
Usage:
	cron-eat-unroll
	0 4 */5 * * cron-eat-unroll >>log/cron-eat-unroll.log 2>&1
END
)

PROG=$(basename $0)
BLOBIO_SERVICE=${BLOBIO_SERVICE:=localhost:1797}
TMPDIR=${TMPDIR:=/tmp}
CACHE_PURGE_DAYS=3

leave()
{
	STATUS=$?
	cd $TMPDIR && test $TMPDIR != '.' -a -e $WORK_DIR && rm -r $WORK_DIR
	log 'good bye, cruel world'
	exit $STATUS
}

log()
{
	echo "$(date +'%Y/%m/%d %H:%M:%S'): $PROG#$$: $@"
}

die()
{
	echo "$PROG: ERROR: $@" >&2
	#
	#  An error invalidates the unroll cache.
	#
	#  Note:
	#	Why invalidate the cache?  The command 'blobio get'
	#	insures no blob is written to the file.
	#
	test -n "$UNROLL_CACHE_DIR" && test -d $UNROLL_CACHE_DIR &&
						rm -r $UNROLL_CACHE_DIR
	exit 255
}

test "$1" = '--help' && echo "$HELP" && exit 0
test $# -eq 0 || die 'wrong number number of arguments'

trap leave EXIT

log 'hello, world'

#
#  Go to BLOBIO_ROOT, in case TMPDIR is relative
#
test -n $BLOBIO_ROOT || die "undefined environment variable: $BLOBIO_ROOT"
cd $BLOBIO_ROOT || die "cd $BLOBIO_ROOT failed"
if [ -e etc/profile ];  then
	. etc/profile
else
	log 'WARN: missing etc/profile' >&2
fi

log "BLOBIO_ROOT=$BLOBIO_ROOT"
log "BLOBIO_SERVICE=$BLOBIO_SERVICE"
log "PGHOST=$PGHOST"
log "PGPORT=$PGPORT"
log "PGUSER=$PGUSER"
log "PGPASSWORD=$PGPASSWORD"
log "PGDATABASE=$PGDATABASE"
log "TMPDIR=$TMPDIR"

#
#  Build and go to work directory.
#
WORK_DIR=$TMPDIR/cron-eat-unroll.$(date +'%s').$$.d
log "work directory: $WORK_DIR"
mkdir $WORK_DIR || die "mkdir $WORK_DIR failed: exit status=$?"
cd $WORK_DIR || die "cd $WORK_DIR failed: exit status=$?"

#
#  Setup the blob cache dir for bio-unroll.
#
CACHE_DIR=$BLOBIO_ROOT/cache/cron-eat-unroll
#
#  Keep two sets of caches, since first read indicates blob has been processed.
#
UNROLL_CACHE_DIR=$CACHE_DIR/unroll
if [ ! -d $UNROLL_CACHE_DIR ];  then
	log "creating cache directory: $UNROLL_CACHE_DIR"
	mkdir -p $UNROLL_CACHE_DIR ||
		die "mkdir -p $UNROLL_CACHE_DIR failed: exit status=$?"
fi

log "CACHE_PURGE_DAYS=$CACHE_PURGE_DAYS days"

#
#  Fetch list of all wrap sets
#
log 'unroll all udigs back to beginning of time ...'
bio-unroll --cache-dir $UNROLL_CACHE_DIR >unroll.udig
STATUS=$?
case $STATUS in
0)
	test -s unroll.udig || die 'unexpected empty wrap udig set'
	log "unrolled wrap blob count: $(wc -l unroll.udig | awk '{print $1}')"
	log "first unrolled wrap udig: $(head -1 unroll.udig)"
	log "last unrolled wrap udig: $(tail -1 unroll.udig)"
	;;
1)
	log 'WARN: bio-unroll: some wrap udigs do not exist' >&2
	exit 2
	;;
*)
	die "bio-unroll failed: exit status=$STATUS"
	;;
esac

#
#  Read a list of udigs, fetch the blob if not already fetched, grip if
#  already fetched by not read.
#
cache_blob()
{
	local U

	while read U;  do
		#
		#  Is the udig the well-known empty udig?
		#
		blobio empty --udig $U && continue

		#
		#  Does the blob already exist in the cache?
		#
		#  A blob with non-zero size indicates the blob has NOT
		#  been read by the caller, which is wierd.  A non-zero blob
		#  could be laying around due to a fault in a previous
		#  invocation of cron-eat-unroll or duplicate udigs in the input
		#  stream.
		#
		OUTPUT_PATH=$CACHE_DIR/$U
		if [ -s $OUTPUT_PATH ];  then
			log "WARN: unread cache entry: $OUTPUT_PATH" >&2
			#
			#  Request to reread the blob
			#
			echo $U
			continue
		fi

		#
		#  An empty cache entry indicates a processed blob,
		#  so don't echo
		#
		test -e $OUTPUT_PATH && continue

		#
		#  Fetch the known to be non-empty blob.
		#
		blobio get						\
			--udig $U					\
			--output-path $OUTPUT_PATH			\
			--service $BLOBIO_SERVICE
		STATUS=$?
		case "$STATUS" in
		0)
			#
			#  blobio get leaves the blob read-only.
			#
			chmod u+w $OUTPUT_PATH ||
				die "chmod u+w $OUTPUT_PATH: exit status=$?"
			echo $U
			;;
		1)
			#
			#  Caller only sees cached, readable blobs.
			#
			log "WARN: blob does not exist: $U" >&2
			;;
		*)
			die "blobio get $U failed: exit status=$?"
			;;
		esac
	done
	return 0
}

#
#  Purge the cache directory of old empty entries.
#
purge_cache()
{
	log "purging cache entries older than $CACHE_PURGE_DAYS days ..."
	find $CACHE_DIR -mtime +$CACHE_PURGE_DAYS -type f -empty -print |
	  while read F; do
		log "purge: $F"
		rm $F || die "purge_cache: rm $F failed: exit status=$?"

	done
	STATUS=${PIPESTATUS[*]}
	test "$STATUS" = '0 0' ||
		die "find cache | rm failed: exit status=$STATUS"
	log "counting cache entries in $CACHE_DIR ..."
	log "entry count: $(find $CACHE_DIR -type f | wc -l | awk '{print $1}')"
}

#
#  Fetch udigs of brr logs that have not been processed.
#
log 'generating udig set of blob request logs ...'
cache_blob <unroll.udig | while read UDIG;  do
	WRAP_SET=$CACHE_DIR/$UDIG
	cat $WRAP_SET
	>$WRAP_SET || die "unroll: >$WRAP_SET failed: exit status=$?"
done | awk '!seen[$0]++' >brr-log.udig

STATUS=${PIPESTATUS[*]}
case "$STATUS" in
'0 0 0')
	if [ ! -s brr-log.udig ];  then
		log "WARN: unexpected empty brr log udig set"
		exit 0
	fi

	log "blob request logs count: $(wc -l brr-log.udig | awk '{print $1}')"
	log "first brr log udig: $(head -1 brr-log.udig)"
	log "last brr log udig: $(tail -1 brr-log.udig)"

	;;
*)
	die "cache_blob <unroll.udig | cat | awk >brr-log.udig failed:" \
				"exit status=$STATUS"
	;;
esac

log 'extracting udig set from all brr logs ...'
cache_blob <brr-log.udig | while read BRR_LOG_UDIG;  do
	BRR_LOG=$CACHE_DIR/$BRR_LOG_UDIG
	cat $BRR_LOG || die "brr: cat $BRR_LOG failed: $?"
	>$BRR_LOG || die "brr: >$BRR_LOG failed: exit status=$?"
done | awk -F'	' '
	#
	#  Note:
	#	Regular expressions are SOO00 slow in awk, so we cheat
	#	by looking at partial pattern.  This whole thing is a hack to
	#	to get around a brr log with a syntax error.  Normally
	#	the test simply be
	#
	#		!seen[$4]++
	#	
	#	since the brr would be syntactically correct.
	#
	{
		ulen = length($4);
	}
	((index($4, "sha:") == 1 && ulen == 44) ||
	 (index($4, "sk:") == 1 && ulen == 46)) && !seen[$4]++ {
		print $4
	}' >unroll-all.udig
STATUS="${PIPESTATUS[*]}"
test "$STATUS" = '0 0 0' ||
	die "cache_blob | cat | awk udig failed: exit status=$STATUS"
log "count of all unrolled blob: $(wc -l unroll-all.udig | awk '{print $1}')"

#
#  Find new blobs
#
log 'running sql script to find new blobs ...'
psql -f $BLOBIO_ROOT/lib/eat-unroll.sql
STATUS=$?
test $STATUS -eq 0 || die "psql failed: exit status=$STATUS"
if [ ! -s raw.udig ];  then
	log 'raw udig set is empty, no raw blobs to eat' >&2
	purge_cache
	exit 1
fi

#
#  Eat raw/undigested blobs.
#
log 'eating raw blobs ...'
xargs bio-eat <raw.udig
STATUS=$?
test $STATUS=$? || die "bio-eat failed: exit status=$STATUS"

purge_cache
