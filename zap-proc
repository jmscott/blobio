#
#  Synopsis:
#	Chatty zapping of a background process using pkill -F <pid-file>
#

PROG=$(basename $0)
PROC_OWNER=$(id -nu)

log()
{
	echo "$(date +'%Y/%m/%d %H:%M:%S'): $PROG: $@"
}

die()
{
	log "ERROR: $@" >&2
	exit 1
}

test $# = 1 || die 'wrong number of arguments'
PID_FILE=$1

PROC_NAME=$(basename $(basename $PID_FILE) .pid)
if [ ! -e $PID_FILE ];  then
	log "no pid file (ok): $PID_FILE"
	log "process $PROC_NAME probably not running"
	log 'doing a "pkill bio4d" just in case'
	if pkill -u $PROC_OWNER bio4d;  then
		log "pkill found a matching process, so sleep one second"
		sleep 1
	fi
	exit 0
fi

log "pid file exists: $PID_FILE"
log "process owner: $PROC_OWNER"

PID=$(cat $PID_FILE)
STATUS=$?
test $? = 0 || die "cat $PID_FILE failed: exit status=$STATUS"

log "process to kill: $PROC_NAME#$PID owned by $PROC_OWNER"

pkill -TERM -F $PID_FILE -u $PROC_OWNER
STATUS=$?
case "$STATUS" in
0)
	log "zapped $PROC_NAME process with pid #$PID"
	log "sleeping 1 second while process #$PID exits ..."
	sleep 1
	;;
1)
	log "no process matches with pid #$PID"
	rm -f $PID_FILE || die "rm -f $PID_FILE failed: exit status=$?"
	;;
*)
	die "pkill TERM $PID failed; exit status=$?"
	;;
esac

#  make sure pid file got removed by clean exit.
#  otherwise, nuke process with SIGKILL.

if [ -e $PID_FILE ];  then
	log "WARN: $PID_FILE still exists"
	log "nuking $PROC_NAME#$PID with sig KILL"
	kill -9 $PID
	rm -f $PID_FILE || die "rm -f $PID_FILE failed: exit status=$?"
fi
exit 0
