#!/bin/bash
#
#  Synopsis:
#	Reboot blobio servers (not cron) into cleanish development environment.
#  Description:
#	The script 'dev-reboot' establishes a cleanish development environment
#	for the bio4d and flowd	servers.  Various *.brr and *.[fqx]dr files
#	are purged and wrapped.  No data is removed. Cronjobs are NOT reset.
#
#	Before rebooting all blobio servers, the script dev-reboot kills
#	bio4d and flowd processes owned by $USER, copies the example templates
#	for profile, blobio.flow and psqlrc files into the directory etc/, and
#	the removes all files the directories in log/ and run/.
#
#	Since etc/profile is rewritten to the default in lib/profile.example,
#	the script MUST start in the same directory as the directory
#	determined by BLOBIO_ROOT in lib/profile.example.
#
#	To prevent overwriting a file in etc/ with the lib/ version,
#	just create a file with a .keep suffix.  For example, to keep
#	etc/profile, do
#
#		ln etc/profile etc/profile.keep
#	
#  Usage:
#	cd $HOME/opt/blobio
#	. bash_login
#	dev-reboot >dev-reboot.out 2>&1 &
#
#	dev-reboot --no-zap-flowd	# do not zap flowd processes
#
#  Note:
#	Replace zap-process with zap-bio4d.
#

PROG=$(basename $0)

log()
{
	echo "$(date +'%Y/%m/%d %H:%M:%S'): $PROG#$$: $@"
}

die()
{
	log "ERROR: $@" >&2
	exit 1
}

leave()
{
	log 'good bye, cruel world'
}

reset_etc()
{
	log 'resetting conf files in directory etc/'
	while [ "$1" ];  do
		F="$1"
		shift

		KF=etc/$F.keep
		if [ -e $KF ];  then
			log "keep file exists, so skipping reset: $KF"
			continue
		fi

		EF=etc/$F
		BF=tmp/$F.bak
		if [ -e $EF ];  then
			log "copy $EF -> $BF"
			cp $EF $BF			|| die "cp $BF failed"
		fi

		LF=lib/$F.example
		test -r $LF			|| die "can not read file: $LF"

		log "copy $LF -> $EF"
		cp $LF $EF			|| die "cp $LF $EF failed"
		chmod +w $EF			|| die "chmod $EF failed"
	done
}

case $# in
0)
	NO_ZAP_FLOWD=no
	;;
1)
	case "$1" in
	help|--help)
		echo "usage: $PROG [--no-zap-flowd]"
		exit 0
		;;
	--no-zap-flowd)
		NO_ZAP_FLOWD=yes
		;;
	*)
		die "unexpected argument: $1"
		;;
	esac
	;;
*)
	die "wrong argument count: got $#, expected 0 or 2"
	;;
esac

log 'hello, world'
trap leave EXIT

test "$USER" = blobio && die 'can not dev-reboot as user blobio'

log "BLOBIO_ROOT=$BLOBIO_ROOT"
test -n "$BLOBIO_ROOT" || die "env not defined: BLOBIO_ROOT"
cd $BLOBIO_ROOT || die "cd $BLOBIO_ROOT failed: exit status=$?"
. etc/profile

log "no zap flowd: $NO_ZAP_FLOWD"

#  shorten spool/bio4d.brr by doing a wrap
if [ -e run/bio4d.pid ];  then
	log "doing wrap since bio4d process may to be running"
	PID=$(head -1 run/bio4d.pid)
	log "pgrep biod4d: pid=#$PID"
	pgrep -u $USER -F run/bio4d.pid >/dev/null	#  no option -q for gnu!
	STATUS=$?
	case $STATUS in
	0)
		log "bio4d $PID running, so doing wrap"
		blobio wrap --service $BLOBIO_SERVICE			||
			die "blobio wrap failed: exit status=$?"
		;;
	1)
		log "no bio4d process, so no wrap: #$PID"
		;;
	*)
		die "pgrep biod4d failed: exit status=$STATUS"
		;;
	esac
fi

if [ $NO_ZAP_FLOWD = no ];  then
	log 'zapping flowd ...'
	zap-proc run/flowd.pid
fi
log 'zapping bio4d ...'

zap-proc run/bio4d.pid bio4d-listen

log 'zap files in directories: run/ log/'
(
	echo bloody-bsd-xargs-missing-no-run-if-empty
	find run log -type f -follow					|
		#  don't zap log/dev-reboot.lo
		fgrep -v log/dev-reboot.log

) | xargs rm -vf

reset_etc bash_login-dev profile psqlrc blobio.flow || exit 1
exec cron-reboot $@
