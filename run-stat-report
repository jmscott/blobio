#!/usr/bin/env bash
#
#  Synospsis:
#	Report of GREEN/YELLOW/RED stats for bio4d & flowd processes.
#  Usage:
#	run-stat-report
#  See:
#	https://github.com/jmscott/work
#	/usr/local/jmscott/bin/duration-english
#  Exit Status:
#	0	ok
#	1	error
#  Note:
#	Consider adding the disk usage of the volume storing
#	$BLOBIO_ROOT/data.  For gnu "df" do "df -h $BLOBIO_ROOT/data".
#
#	On gnu/linux sort is ignoring the second key.  The pain never ends.
#
NOW=$(date +'%s')

die()
{
	echo "$(basename $0): ERROR: $@" >&2
	exit 1
}

test $# = 0 || die "wrong number of arguments: got $#, expected 0"
test -n "$BLOBIO_ROOT" || die 'env not defined: BLOBIO_ROOT'
cd $BLOBIO_ROOT || die "cd BLOBIO_ROOT failed: exit status=$?"

(
	cat <<END
Process	State	Boot	Green,Yellow,Red	Recent	Green,Yellow,Red
-------	-----	-----	----------------	------	----------------
END
	run-stat-tuple							|
		sort --key=2 --key=1 --field-separator=$'\t'		|
		while read PROC STATE					\
			BOOT_EPOCH BOOT_GREEN BOOT_YELLOW BOOT_RED	\
			REC_EPOCH REC_GREEN REC_YELLOW REC_RED;  do

			#  collapse the green/yellow/red tuple to single 
			#  G,Y,R value
			if [ $BOOT_GREEN != null ];  then
				BOOT_GYR="$BOOT_GREEN,$BOOT_YELLOW,$BOOT_RED"
			else
				BOOT_GYR=null
			fi
			if [ $REC_GREEN != null ];  then
				REC_GYR="$REC_GREEN,$REC_YELLOW,$REC_RED"
			else
				REC_GYR=null
			fi

			#  convert boot and recent sample epochs to
			#  readable english
			if [ $BOOT_EPOCH != null ];  then
				BOOT_AGO=$(elapsed-english $BOOT_EPOCH)
			fi
			if [ $REC_EPOCH != null ];  then
				REC_AGO=$(elapsed-english $REC_EPOCH)
			fi
					
			cat <<END
$PROC	$STATE	$BOOT_AGO	$BOOT_GYR	$REC_AGO	$REC_GYR
END
		done
)									|
	column -s '	' -t						|
	sed 's/ *	//'
