#!/bin/bash
#
#  Synopsis:
#	Boot flowd process from MAC OS launchd or systemd.
#  Usage:
#	Ponder moving 'unset PGSYSCONFDIR' somewhere else.
#	Only gocode/libpq croaks on defined PGSYSCONFDIR, so we can
#	not put 'unset PGSYSCONFDIR' in etc/profile.
#
#		BLOBIO_ROOT=/usr/local/blobio/sync/remote/wework
#		cd $BLOBIO_ROOT
#		sbin/boot-flowd etc/wework.flow
#  Note:
#	Need to log when removing stale files in run/flowd.*
#
#	Change explicit dependence on
#
#		etc/sync-<remote-tag>.flow
#
#	to
#		etc/<remote-tag>.flow
#

PROG=$(basename $0)

unset PGSYSCONFDIR			#  PGSYSCONFDIR busts golang libpq

log()
{
	echo "$(date +'%Y/%m/%d %H:%M:%S'): $PROG: $@"
}

die()
{
	log "ERROR: $@" >&2
	exit 1
}

zap_run()
{
	test -z "$BLOBIO_ROOT" -o ! -d $BLOBIO_ROOT && return

	log 'removing stale files in run/flowd*'
	find run/ -type f -name 'flowd*' | xargs --no-run-if-empty rm -v
	local STATUS="${PIPESTATUS[*]}"
	test "$STATUS" = '0 0'					||
		log "WARN: rm run/stale failed: exit status=$STATUS" >&2
}

leave()
{
	STATUS=$?
	zap_run
	log 'good bye, cruel world'
	exit $STATUS
}

test $# = 1 || die "wrong number of command arguments: got $#, expected 1"
FLOW_CONF=$1

log 'hello, world'
trap leave EXIT

log "BLOBIO_ROOT=$BLOBIO_ROOT"
log "PATH=$PATH"
log "flow conf: $FLOW_CONF"
log "current directory: $(pwd)"

test -r etc/profile || die "can not read $(pwd)/etc/profile"
. etc/profile

#  Note: need flowd to be smarter about missing brr file!
touch spool/bio4d.brr || die "touch bio4d.brr failed: exit status=$?"

#
#  In theory, launchd or systemd is responsible for killing the kids,
#  so we can confidently clean out the run/flowd files.
#
#	<key>AbandonProcessGroup</key>
#	<false/>
#
#  However, we do not trust launchd, so simply kill a running flowd
#  and move on.
#
RUN_PID=run/flowd.pid
if [ -e $RUN_PID ];  then
	log "pid file exists: $RUN_PID"
	if [ -s $RUN_PID ];  then
		PID=$(head -1 $RUN_PID)
		log "killing possible flowd process: #$PID"
		kill $PID
	else
		log 'pid file is empty, so perhaps flowd crashed'
	fi
else
	log 'no run/flowd.pid (good)'
fi

zap_run

log "invoking flowd server: $FLOW_CONF"
bin/flowd server $FLOW_CONF
STATUS=$?
log "flowd exit status: $STATUS"
exit $STATUS
