#!/bin/bash
#
#  Synopsis:
#	Push flow, query, execute description records into round robin db.
#  Usage:
#	export BLOBIO_ROOT=/opt/jmscot/jmsdesk/blobio
#	cd $SETSPACE_ROOT/schema/setcore
#	bio-dr2rdd setcore
#  Exit Status:
#	0	rolled, no error
#	1	unknown error
#  Note:
#	Script MUST be invoked on root dir containing the fdr log files
#	in log/ and cache/rrd.
#
#	Really, really really need to move files flowd.{fdr,qdr,xdr} to spool.
#
PROG=$(basename $0)
DR_DIR=log/
TMP_FDR=${TMPDIR:=/tmp}/$PROG-fdr.$$
PSQL='psql --no-psqlrc --quiet --pset=pager=off'
RRD=cache/rrd/fdr.rrd

now()
{
	date +'%Y/%m/%d %H:%M:%S'
}

log()
{
	echo "$(now): $PROG: $@"
}

WARN()
{
	log "WARN (ok): $@" >&2
}

leave()
{
	STATUS=$?
	rm -f $TMP_FDR_LIST || WARN "rm cleanup failed"
	log 'good bye, cruel world'
	exit $STATUS
}

die()
{
	FAULT=run/$PROG.fault
	MSG="ERROR: $@"
	echo "$(now): $MSG" >>$FAULT ||
		WARN "echo >>$FAULT failed: exit status=$?"
	log $MSG >&2
	exit 1
}

log 'hello, world'
trap leave EXIT
log "data record dir: $DR_DIR"

test $# = 1 || die "wrong number of arguments: got $#, expected 1"
SOURCE=$1
log "source tag: $SOURCE"
[[ "$SOURCE" =~ ^[a-z][a-z0-9_]{0,15}$ ]] || die "source is not a tag: $SOURCE"

test -n "$BLOBIO_ROOT" || die 'env not defined: BLOBIO_ROOT'

MERGE_SQL=$BLOBIO_ROOT/lib/stage-fdr2rrd.sql
test -r $MERGE_SQL || die "can not read sql: $MERGE_SQL"

RRD=cache/rrd/fdr.rrd
if [ -e $RRD ];  then
	log "rrd file: $RRD"
else
	WARN "no rrd file: $RRD"
	log "creating rrd file: $RRD"
	mkdir -p cache/rrd || die "mkdir cache/rrd failed: exit status=$?"
	rrdcreate --template $BLOBIO_ROOT/lib/fdr-template.rrd $RRD ||
		die "rrdcreate failed: exit status=$?"
fi

test -w $RRD || die "rrd is not writable: $RRD"

#  build the list of fdr files to push to rrd

log 'finding *.fdr files to push to rrd ...'
find $DR_DIR								\
	-maxdepth 1							\
	-follow								\
	\( -name '*.fdr' -a ! -name flowd.fdr \)			|
	sort >$TMP_FDR
STATUS=${PIPESTATUS[*]}
test "$STATUS" = '0 0' || die "find dr failed: exit status=$STATUS"
FDR_COUNT=$(wc -l $TMP_FDR | cut -d' ' -f1)
log "fdr log count: $FDR_COUNT files"
if [ -z $TMP_FDR ];  then
	WARN "no fdr files in $DR_DIR (ok)"
	exit 0
fi

log 'copy/merge fdr records into unlogged table rrd_stage_fdr ...'
xargs cat <$TMP_FDR | fdr2pg-copy-stage $SOURCE | psql
STATUS=${PIPESTATUS[*]}
test "$STATUS" = '0 0 0' || die "fdr | psql failed: exit status=$?"
log 'copy/merge succeeded'

log 'merging staged sql tuples into round robin database ...'
$PSQL --file $MERGE_SQL --var source=$SOURCE				|
	xargs								\
		--max-lines=1						\
		--no-run-if-empty					\
			rrdtool update					\
				--skip-past-updates			\
				$RRD
STATUS=${PIPESTATUS[*]}
test "$STATUS" = '0 0' || die "psql | rrdupdate failed: exit status=$STATUS"

log 'fetching rrd lastupdate tuple ...'
rrdtool lastupdate $RRD || die "rrd lastupdate failed: exit status=$?"

LAST_EPOCH=$(rrdtool lastupdate $RRD|tail -1|sed 's/:.*//')
log "last update: $(date -d @$LAST_EPOCH)"
log "last since: $(elapsed-english $LAST_EPOCH) ago"

log "rsync/rm $FDR_COUNT fdr files to attic ..."
rsync 									\
	--files-from=$TMP_FDR						\
	--remove-source-files						\
	--archive							\
	--verbose							\
	. attic/
test $? = 0 || die "rsync log/*.fdr->attic failed: exit status=$?"

exit 0
