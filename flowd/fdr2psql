#!/usr/bin/perl
#
#  Synopsis:
#	Transform stream of fdr records into sql 'copy in' for fdr table
#  Usage:
#	fdr2sql <flowd.fdr | psql
#  Note:
#  	Rename to bio-fdr2psql?
#

my $fdr_re = qr{
	#  start time of request: YYYY-MM-DDThh:mm:ss.ns[+-]HH:MM
	(2\d\d\d-				#  year
		(?:(?:0[0-9])|10|11|12)-	#  month
		(?:(?:[012][0-9])|30|31)T	#  day followed by T
		(?:[0-2]\d):			#  hour
		(?:[0-5]\d):			#  minute
		(?:[0-5]\d)\.			#  second
		(?:\d{1,9})			#  nanoseconds
		[+-]\d\d:\d\d			#  time zone offset
	)					\t

	#  udig of blob being processed
	([a-z][a-z0-9]{0,7}:[a-f0-9]{32,128})	\t

	#  ok count
	([0-9]{0,9})				\t

	#  fault count
	([0-9]{0,9})				\t

	#  wall duration in secs
	([0-9]{0,9}\.\d{0,9})			\t

	#  flow sequence number (unique)
	(\d{1,19})
}sx;

my ($first_start_time, $end_time);

print <<END;
\\timing on
\\set ON_ERROR_STOP on

\\echo create temp table sync_fdr
CREATE TEMP TABLE sync_fdr AS
  select
	*,
	'New'::text as syncability
    FROM
    	blobio.fdr_stage
    WHERE
	false
;

\\echo copy into pg_temp.sync_fdr
COPY pg_temp.sync_fdr (
	start_time,
	blob,
	ok_count,
	fault_count,
	wall_duration,
	sequence,
	syncability
) FROM stdin;
END

my $count = 0;
while (<STDIN>) {
	chomp;
	die "unknown fdr record: $_" unless m/^${fdr_re}$/;
	print <<END;
$1\t$2\t$3\t$4\t$5\t$6\tNew
END
	$first_start_time = $1 unless $first_start_time;
	$end_time = $1;

	$count++;
}

unless ($first_start_time) {
	print <<END;
\\echo no flow records scanned
\\quit
END
	exit 0;
}

print <<END;
\\.

\\echo copied in $count flow records

\\echo creating unique index on (start_time, sequence)
CREATE UNIQUE INDEX idx_sync_fdr
  ON pg_temp.sync_fdr(start_time, sequence)
;

\\echo vacuum/analyze pg_temp.sync_fdr
VACUUM ANALYZE pg_temp.sync_fdr;

\\echo tagging existing fdr records
UPDATE pg_temp.sync_fdr s
  SET
  	syncability = 'Existing'
  WHERE
  	EXISTS (
	  SELECT
	  	*
	    FROM
	    	blobio.fdr_stage fdr
	    WHERE
		fdr.start_time = s.start_time
		AND
		fdr.sequence = s.sequence
	)
;

\\echo creating index on sync_fdr(syncability)
CREATE INDEX idx_sync_fdr_sync
  ON
  	pg_temp.sync_fdr(syncability)
;

\\echo creating index on sync_fdr(start_time)
CREATE INDEX sync_fdr_start_time
  ON
  	pg_temp.sync_fdr(start_time)
;

\\echo revacuum/analyze pg_temp.sync_fdr after update
VACUUM ANALYZE pg_temp.sync_fdr;

\\x on
\\echo summarizing only New flow detail records
SELECT
	to_char(min(start_time), 'YYYY/MM/DD HH24:MI:SS TZ') as "Start Time",
	to_char(max(start_time), 'YYYY/MM/DD HH24:MI:SS TZ') as "End Time",
	(max(start_time) - min(start_time)) as "Request Duration",
	avg(wall_duration) as "Average Wall Duration",
	count(*) as "New Flow Count",
	count(distinct blob) as "Distinct Blob Count",
	sum(ok_count) as "Ok Count",
	sum(fault_count) as "Fault Count"
  FROM
  	pg_temp.sync_fdr
  WHERE
	syncability = 'New'
  ORDER BY
  	2 desc
;

\\echo inserting new flow records ...
INSERT INTO blobio.fdr_stage(
	start_time,
	blob,
	ok_count,
	fault_count,
	wall_duration,
	sequence
) SELECT
	start_time,
	blob,
	ok_count,
	fault_count,
	wall_duration,
	sequence
    FROM
    	pg_temp.sync_fdr
    WHERE
    	syncability = 'New'
;

\\x on
\\echo summarize all staged fdr from $end_time to $first_start_time
SELECT
	to_char('$first_start_time'::timestamptz, 'YYYY/MM/DD HH24:MI:SS TZ')
		AS "Start Time",
	to_char('$end_time'::timestamptz, 'YYYY/MM/DD HH24:MI:SS TZ')
		AS "End Time",
	('$end_time'::timestamptz - '$first_start_time'::timestamptz)
		AS "Request Duration",
	avg(wall_duration) AS "Average Wall Duration",
	count(*) AS "Total Flow Count",
	count(distinct blob) AS "Total Distinct Blob Count",
	sum(ok_count) AS "Total Ok Count",
	sum(fault_count) AS "Total Fault Count"
  FROM
  	blobio.fdr_stage
  WHERE
	start_time >= '$first_start_time'
	AND
	start_time <= '$end_time'
  ORDER BY
  	2 desc
;
END
