#!/bin/bash
#
#  Synopsis:
#	Put as blobs both a file and a json meta blob describing the put.
#  Usage:
#	bio-put-file invoice-20160215.pdf
#	find . -name '*.pdf' -print | bio-put-file
#  Note:
#	Replace function escape_json() with call to program to be written
#	/usr/local/jmscott/bin/escape-json-string.
#
#	Consider removing reading the file list from stdin when the argument
#	list is empty.  xargs is your friend.
#

PROG=$(basename $0)
TMPDIR=${TMPDIR:=/tmp}
JSON_TMP=$TMPDIR/$PROG-$$.json
BASH_PID=$$

trap "rm -f $JSON_TMP" EXIT

die()
{
	echo "ERROR: $PROG: $@" >&2
	exit 1
}

test -n "$BLOBIO_SERVICE" || die 'env variable not defined: BLOBIO_SERVICE'
test -n "$BLOBIO_ALGORITHM" || die 'env variable not defined: BLOBIO_ALGORITHM'

escape_json()
{
	perl -p -e 's/([\\"])/\\$1/g'			|
		perl -p -e 's/\n/\\n/g'			|
		perl -p -e 's/\t/\\t/g'			|
		perl -p -e 's/[\b]/\\b/g'		|
		perl -p -e 's/\f/\\f/g'			|
		perl -p -e 's/\r/\\r/g'
}

put_file()
{
	FILE="$1"

	test -d "$FILE" && die "$FILE is a directory"
	test -r "$FILE" || die "can't read $FILE"

	#  derive the digest of the file to put
	DIGEST=$(blobio eat --algorithm $BLOBIO_ALGORITHM --input-path "$FILE")
	STATUS=$?
	test $STATUS = 0 || die "blobio eat file failed: exit status=$STATUS"
	test -n "$DIGEST" || die "blobio eat failed: empty digest"
	UDIG=$BLOBIO_ALGORITHM:$DIGEST

	#  does the file blob already exist in the blob service?
	blobio eat --udig $UDIG --service $BLOBIO_SERVICE
	STATUS=$?
	BLOB_EXISTED=false
	case $STATUS in
	1)
		blobio put --udig $UDIG --input-path "$FILE" 		\
						--service $BLOBIO_SERVICE
		test $? = 0						||
			die "blobio put file failed: exit status=$STATUS"
		cat <<END
$FILE
	>$UDIG
END
		;;
	0)
		BLOB_EXISTED=true
		cat <<END
$FILE
	@$UDIG
END
		;;
	*)
		die "blobio eat file failed: exit status=$STATUS"
		;;
	esac

	#
	#  Always put the json meta description, regardless of if the blob
	#  existed prior to this invocation of bio-put-file.
	#
	cat <<END >$JSON_TMP
{
	"blobio.com": {
		"command-line": {
			"command":	"bio-put-file",
			"udig":		"$UDIG",
			"path":		"$(echo -n "$FILE" | escape_json)",
			"pwd":		"$(pwd | escape_json)"
		},
		"hostname":	"$(hostname | escape_json)",
		"environment": 	{
					"USER":	"$USER",
					"LOGNAME":	"$LOGNAME",
					"BLOBIO_SERVICE": "$BLOBIO_SERVICE"
		},
		"gnu_file":	"$(file "$FILE" | escape_json)",
		"date":		"$(date | escape_json)",
		"stat":		"$(stat "$FILE" | escape_json)",
		"blob_existed":	$BLOB_EXISTED,
		"bash_pid":	$BASH_PID,
		"json_tmp":	"$(echo -n "$JSON_TMP" | escape_json)"
	}
}
END
	STATUS=$?
	test $STATUS = 0 || die "cat >json failed: exit status=$STATUS"
	test -s $JSON_TMP || die "json file has size of zero: $JSON_TMP"

	#  derive digest for json meta blob
	DIGEST=$(
		blobio eat						\
			--algorithm $BLOBIO_ALGORITHM			\
			--input-path $JSON_TMP
	)
	STATUS=$?
	test $STATUS = 0 || die "blobio eat json failed: exit status=$STATUS"
	test -n "$DIGEST" || die "blobio eat json: empty digest"

	UDIG=$BLOBIO_ALGORITHM:$DIGEST

	#  Paranoid check that the json meta blob does NOT exist.

	blobio eat --udig $UDIG --service $BLOBIO_SERVICE
	STATUS=$?
	test $STATUS = 0						&&
		die "impossible: json meta blob already exists: $UDIG"
	test $STATUS != 1 && die "blobio eat json failed: exit status=$STATUS"

	blobio put --udig $UDIG --input-path $JSON_TMP 			\
					--service $BLOBIO_SERVICE
	STATUS=$?
	test $STATUS = 0 || die "blobio put json failed: exit status=$STATUS"
	cat <<END
	>>$UDIG
END
}

case $# in
0)
	while read F;  do
		put_file "$F"
	done
	;;
*)
	while [ "$1" ];  do
		put_file "$1"
		shift
	done
	;;
esac
