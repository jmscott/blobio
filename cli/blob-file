#!/usr/local/bin/perl
#
#  Synopsis:
#	Put a file as a blob with a meta description.
#  Requires:
#	PostgreSQL psql, File::Temp tempdir
#  Blame:
#	jmscott@setspace.com
#	setspace@gmail.com
#

use File::Temp;
my $prog = 'blob-file-';

sub escape_xml
{
	$_ = $_[0];

	s/</&lt;/g;
	s/>/&gt;/g;
	s/&/&amp;/g;
	s/"/&quot;/g;
	s/'/&apos;/g;
	return $_;
}
#
#  Helper function for system().
#
sub _system
{
	my %arg = @_;
	my (
		$what,
		$command,
		$expected,
	) = (
		$arg{what},
		$arg{command},
		$arg{expected},
	);

	die "_system: missing variable 'what'" unless $what;
	my $nm = "_system: $what";

	die "nm: missing variable 'command'" unless $command;

	$command =~ s/\s*\n+\s*$//;		# strip trailing space 
	my $status = system($command);
	#
	#  Check the lower order bits indicating abnormal termination.
	#
	die "$nm: unexpected process exit: $!: " .
				sprintf('0x%x', $status) if $status & 0xff;
	$status = ($status >> 8) & 0xff;
	die "$nm: unexpected status: $status"
					if $expected && $status !~ /$expected/;
}

my $verb = shift @ARGV;
die "missing verb" unless $verb;
die "unknown verb: $verb" unless $verb eq 'put';

#
#  Verify the file is readable.
#
my $path = shift @ARGV;
die "missing path" unless $path;
die "can't read file: $path" unless -r $path;
my $xml_path = &escape_xml($path);
my $shell_path = $path;
$shell_path =~ s/'/\\'/g;

#
#  Derive the skein digest of the file.
#
my $udig;  {
	my $digest = `blobio eat --input-path '$shell_path' --algorithm sk`;
	chop $digest;
	die "blobio eat: unexpected digest: $digest"
				unless $digest =~ /^[a-zA-Z0-9_@]{43}$/;
	$udig = "sk:$digest";
}

#
#  Derive the full path of the file.
#
my $cwd = `pwd`;
chop $cwd;
$cwd = &escape_xml($cwd);

#
#  Get the size of the file.
#
my $size; {
	my @stat = stat($path);
	$size = $stat[7];
	die "stat($path) failed: $!" unless $size =~ /^[0-9]{1,}$/;
}

#
#  Put the blob to the server.
#
_system(
	what	=>	"blobio: put $udig",
	expected=>	'^0$',
	command	=>	<<END
blobio put 		\\
	--service localhost:1797 	\\
	--input-path '$shell_path' 		\\
	--udig $udig
END
);

my $xml =<<END;
<xml version="1.0"?>
<file
	udig="$udig"
	cwd="$cwd"
	path="$path"
	size="$size"
 />
END

#
#  Write the XML description of the file to the blob server.
#
my $XML = File::Temp->new(UNLINK => 1);
die "File::Temp->new() failed: $!" unless $XML;
$path = $XML->filename;
my $nwrite = length($xml);
die "syswrite($path) != $nwrite: $!" unless syswrite($XML, $xml) == $nwrite;

$shell_path = $path;
$shell_path =~ s/'/\\'/g;

#
#  Derive the digest of the xml meta file.
#
{
	my $digest = `blobio eat --input-path '$shell_path' --algorithm sk`;
	chop $digest;
	die "blobio eat: unexpected digest: $digest"
				unless $digest =~ /^[a-zA-Z0-9_@]{43}$/;
	$udig = "sk:$digest";
}

_system(
	what	=>	'blobio: put <meta xml>',
	expected=>	'^0$',
	command	=>	<<END
blobio put 		\\
	--service localhost:1797 	\\
	--input-path '$shell_path' 		\\
	--udig $udig
END
);
print $udig, "\n";
