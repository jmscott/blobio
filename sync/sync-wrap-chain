#!/bin/bash
#
#  Synopsis:
#	Brute force sync of local blobs in a chain of wrap sets to remote.
#  Description:
#	Sync local blobs derived from a chain of logs of wrapped blob request
#	requests.  The source is the local server in $BLOBIO_SERVICE.
#	The remote server is specified on the command line.  Each blob
#	is verified on the remote server with an "eat" request.  Successful
#	eats are cached.
#  Usage:
#	sync-wrap-chain <remote service> <stop brr log count> 
#	sync-wrap-chain condor.setspace.com 24
#	
#  Exit Status:
#	0	no error, all blobs sunk across the chain of wrap sets.
#	1	wrong number of arguments
#	2	unknown error
#  Note:
#	Deleted blobs are not zapped.
#
#	Can the variable EXISTS_COUNT be replaced with global bash variable?
#
#	Need to run sync process in $BLOBIO_ROOT/sync/remote/$SYNC_NAME.
#
#	Does cache need to remove taken blobs?
#

PROG=$(basename $0)

log()
{
	echo "$(date +'%Y/%m/%d %H:%M:%S'): $@"
}

die()
{
	STATUS=$1
	case "$STATUS" in
	[0-9])
		shift
		;;
	*)
		STATUS=2
		;;
	esac

	log "ERROR: $@" >&2
	exit $STATUS
}

leave()
{
	#  zap the temporary work directory
	if [ -n "$WORK_DIR" -a -e "$WORK_DIR" ];  then
		test -e PUT_COUNT && log "put count: $(cat PUT_COUNT)"
		test -e EXISTS_COUNT && log "exists count: $(cat EXISTS_COUNT)"
		test -e CACHED_COUNT && log "cached  count: $(cat CACHED_COUNT)"
		cd ..
		rm -rf $WORK_DIR
	fi

	log 'good bye, cruel world'
	exit
}

test $# = 2 || die 1 "wrong number of arguments, got $#, expected 2"
SYNC_NAME=$1
STOP_BRR_LOG_COUNT=$2

log 'hello, world'
trap leave EXIT QUIT INT TERM

log "sync root name: $SYNC_NAME"
log "stop brr log count: $STOP_BRR_LOG_COUNT"

test -n "$BLOBIO_ROOT" || die 'env variable not defined: BLOBIO_ROOT'
cd $BLOBIO_ROOT || die "cd $BLOBIO_ROOT failed: exit status=$?"

#  Local profile in $BLOBIO_ROOT/etc/profile

test -r etc/profile || die "profile does not exist: $(pwd)/etc/profile"
. etc/profile || die "$(pwd)/etc/profile failed"
test -n "$BLOBIO_SERVICE" || die 'environment not defined: BLOBIO_SERVICE'
LOCAL_SERVICE=$BLOBIO_SERVICE
log "local blobio service: $LOCAL_SERVICE"
LOCAL_GET_SERVICE=${BLOBIO_GET_SERVICE:=$BLOBIO_SERVICE}
log "local blobio get service: $LOCAL_GET_SERVICE"

#  Get the remote service from $SYNC_ROOT/etc/profile
SYNC_ROOT=$BLOBIO_ROOT/sync/remote/$SYNC_NAME
log "sync root: $SYNC_ROOT"
test -d $SYNC_ROOT || die "sync root dir does not exist: $SYNC_ROOT"
SYNC_PROFILE=$SYNC_ROOT/etc/profile
test -e $SYNC_PROFILE || die "sync profile does not exist: $SYNC_PROFILE"
unset BLOBIO_SERVICE
. $SYNC_PROFILE
test -n "$BLOBIO_SERVICE" || die "BLOBIO_SERVICE not defined: $SYNC_PROFILE"
SYNC_SERVICE=$BLOBIO_SERVICE
log "sync service: $SYNC_SERVICE"

#  make the temporary work dir

TMPDIR=${TMPDIR:=/tmp}
WORK_DIR=$TMPDIR/$PROG-$$.d
log "work dir: $WORK_DIR"
mkdir $WORK_DIR || die "mkdir $WORK_DIR failed: exit status=$?"
cd $WORK_DIR || die "cd $WORK_DIR failed: exit status=$?"

echo 0 >PUT_COUNT
echo 0 >EXISTS_COUNT
echo 0 >CACHED_COUNT

log "walking $STOP_BRR_LOG_COUNT brr logs back in time ..."
BLOBIO_SERVICE=$LOCAL_SERVICE walk-wrap-set				\
	--stop-brr-log-count $STOP_BRR_LOG_COUNT >WALK_WRAP_SET	||
			die "walk-wrap-set failed: exit status=$?"
test -s WALK_WRAP_SET || die 'walk wrap set is empty'

#  dump the stats of this chain of wrap set
grep '#' WALK_WRAP_SET

SYNC_SERVICE="--service $SYNC_SERVICE"
GET_SERVICE="--service $LOCAL_GET_SERVICE"
log 'syncing local blobs to remote service'
grep '^[a-z][a-z0-9].*:' WALK_WRAP_SET					|
	bio-udig2fs							|
	while IFS=$'\t' read -r U P;  do

	#  has the blob already been verified on the remote server
	EXISTS=$SYNC_ROOT/cache/exists/$P
	if [ -e $EXISTS ];  then
		#  reset atime for purge scripts
		touch -a $EXISTS || die "touch $EXISTS failed: exit status=$?"
		C=$(expr $(cat CACHED_COUNT) + 1)
		echo $C >CACHED_COUNT
		continue
	fi

	#  poll the remote server
	UDIG="--udig $U"
	blobio eat $SYNC_SERVICE $UDIG
	STATUS=$?
	case $STATUS in
	0)
		#  update cache directory
		ED=$(dirname $EXISTS)
		mkdir -p $ED || die "mkdir $ED failed: exit status=$?"
		>$EXISTS || die ">$EXISTS failed"

		log "@$U"
		C=$(expr $(cat EXISTS_COUNT) + 1)
		echo $C >EXISTS_COUNT
		continue
		;;
	1)
		;;
	*)
		die "blobio eat failed: exit status=$STATUS"
		;;
	esac

	blobio get $GET_SERVICE $UDIG | blobio put $SYNC_SERVICE $UDIG
	STATUS=${PIPESTATUS[*]}
	case "$STATUS" in
	'0 0')
		log ">$U"
		C=$(expr $(cat PUT_COUNT) + 1)
		echo $C >PUT_COUNT
		;;
	'1 '*)
		die "local blob does not exist: $U"
		;;
	*)
		die "blobio get | put failed: exit status=$STATUS"
		;;
	esac
done

TAKE_COUNT=$(
	grep '^#  Take: [a-z].*:' WALK_WRAP_SET				|
	wc -l								|  
	awk '{print $1}'
)
log "take count: $TAKE_COUNT"
log 'syncing taken blobs ...'
grep '^#  Take: [a-z].*:' WALK_WRAP_SET 				|
	sed 's/^#  Take: //'						|
	while read U;  do
	UDIG="--udig $U"

	#  Verify blob does NOT exist locally.
	#  If blob exists then skip that blob

	blobio eat $UDIG $GET_SERVICE
	STATUS=$?
	case $STATUS in
	0)
		log "WARN: skipping sync since blob exists locally: @$U"
		continue
		;;
	1)
		;;
	*)
		die "take: local: blobio eat failed: exist status=$STATUS"
		;;
	esac

	#  Take the blob from the remote server
	blobio take $UDIG $SYNC_SERVICE --output-path /dev/null
	STATUS=$?
	case $STATUS in
	0)
		log "-$U"
		;;
	1)
		log "?$U"
		;;
	*)
		die "take: remote: blobio take failed: exit status=$STATUS"
		;;
	esac
done
