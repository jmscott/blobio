#!/usr/bin/env bash
#
#  Synopsis:
#	Find blobs in service 1 (PG*) not in service 2 (--pg2*)
#  Usage:
#	minus-service							\
#		--pg2host condor.setspace.com				\
#		--pg2port 5432
#		--pg2user postgres
#		--pg2database blobio
#  Note:
#	Rename to minus-services!
#
#	Consider first polling the database for the number of elements
#	in blobio.service to determine whether to push or pull the
#	udigs most economically.
#
#	PGPASSWORD can not be passed on the command line.

PROG=$(basename $0)
PSQL='psql --no-psqlrc --tuples-only --no-align --echo-errors --pset=pager=off'
SERVICE1=${TMPDIR:=/tmp}/$PROG-service1-$$.udig
SERVICE2=${TMPDIR:=/tmp}/$PROG-service2-$$.udig

info()
{
	echo "$(date +'%Y/%m/%d %H:%M:%S'): $@"
}

leave()
{
	rm -f $SERVICE1 $SERVICE2 ||
				info "ERROR: rm tmp failed: exit status=$?" >&2
	info 'good bye, cruel world'
}

die()
{
	info "ERROR: $@" >&2
	exit 1
}

PG2arg()
{
	NAME=$1
	VAL=$2
	CMD="test -z \"\$PG2$(echo $NAME | tr '[a-z]' '[A-Z]')\""
	eval $CMD
	STATUS=$?
	test $STATUS = 0 || die "option --pg2$NAME: given more than once"
	echo "$VAL"
}

test $# = 8 || die "wrong number of arguments: got $#, expected 8"

while [ "$1" ];  do
	case "$1" in
	--pg2host)
		shift
		PG2HOST=$(PG2arg host "$1")
		test -n "$PG2HOST" || exit 1
		;;
	--pg2port)
		shift
		PG2PORT=$(PG2arg port "$1")
		case "$PG2PORT" in
		[0-9]*)
			;;
		'')
			exit 1
			;;
		esac
		;;
	--pg2user)
		shift
		PG2USER=$(PG2arg user "$1")
		test -n "$PG2USER" || exit 1
		;;
	--pg2database)
		shift
		PG2DATABASE=$(PG2arg database "$1")
		test -n "$PG2DATABASE" || exit 1
		;;
	--*)
		die "unknown option: $1"
		;;
	*)
		die "unknown command argument: $1"
		;;
	esac
	shift
done

info 'hello, world'
trap leave EXIT

export PGHOST=${PGHOST:=$PGHOST}
test -n "$PGHOST" || die "PGHOST or PGHOST not defined"
info "first PGHOST: $PGHOST"

export PGPORT=${PGPORT:=$PGPORT}
test -n "$PGPORT" || die "PGPORT or PGPORT not defined"
info "first PGPORT: $PGPORT"

export PGUSER=${PGUSER:=$PGUSER}
test -n "$PGUSER" || die "PGUSER or PGUSER not defined"
info "first PGUSER: $PGUSER"

export PGDATABASE=${PGDATABASE:=$PGDATABASE}
test -n "$PGDATABASE" || die "PGDATABASE or PGDATABASE not defined"
info "first PGDATABASE: $PGDATABASE"

info "second PGHOST: $PG2HOST"
info "second PGPORT: $PG2PORT"
info "second PGUSER: $PG2USER"
info "second PGDATABASE: $PG2DATABASE"

info "fetching service 1 blob udigs: $SERVICE1"
$PSQL --output=$SERVICE1 <<END || die "psql service1 failed: exit status=$?"
SELECT
	s.blob
  FROM
  	blobio.service s
END
info "service1: $(wc -l $SERVICE1 | awk '{print $1}') blobs"

PGHOST=$PG2HOST
PGPORT=$PG2PORT
PGUSER=$PG2USER
PGDATABASE=$PG2DATABASE

info "finding blobs not in service2: $SERVICE2"
$PSQL --quiet --output=$SERVICE2 <<END	|| die "psql service2 failed: exit status=$?"
\\set ON_ERROR_STOP on

\\echo create temp table minus_service1
CREATE TEMP TABLE minus_service1 (blob udig primary key);

\\echo copy in minus_service1
\\COPY minus_service1 FROM '$SERVICE1'

\\echo analyze minus_service1
ANALYZE minus_service1;

\\echo finding blobs in service 1 not in service 2

SELECT
	blob
  FROM
  	minus_service1 s1
  WHERE
  	NOT EXISTS (
	  SELECT
	  	s2.blob
	    FROM
	    	blobio.service s2
	    WHERE
	    	s2.blob = s1.blob
	)
;
END
test -e $SERVICE2 || die "service file does not exist: $SERVICE2"
C_MINUS=$(wc -l $SERVICE2 | awk '{print $1}')
if [ $C_MINUS = 0 ];  then
	info 'OK: all blobs exist in service2'
	exit 0
fi

info "$C_MINUS blobs do not exist in service 2"
cat $SERVICE2 | while read U;  do
	info "?$U"
done
