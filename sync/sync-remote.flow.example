#
#  Synopsis:
#	Example flow config for syncing a local bio4 server with a remote.
#  Note:
#	Various scripts expect the name of this file to be
#	sync-<remote-name>.flow, so do not rename!
#

boot
{
	brr_capacity = 64;
	os_exec_capacity = 16;
	os_exec_worker_count = 16;
	flow_worker_count = 8;

	qdr_roll_duration = "24h";
	fdr_roll_duration = "24h";
	xdr_roll_duration = "24h";
	heartbeat_duration = "10s";
}

#  remote blobio bio4d server.
#  typically ssh tunnel to remote bio4d server.

command eat_remote
{
	path = "blobio";
	argv = (
		"eat",
		"--service",
		"{REMOTE_BLOBIO_SERVICE}",
		"--udig"
	);
	exit_status is OK when in {0, 1};
}

#  put blob to remote blobio bio4d server.
#  typically ssh tunnel to remote bio4d server.

command sync_put
{
	path = "sync-put";
	argv = (
		"{REMOTE_BLOBIO_SERVICE}"
	);
	exit_status is OK when in {0, 1};
}

command lock_put
{
	path = "lock-flow-udig";
	argv = (
		"put"
	);
}

command unlock_put
{
	path = "lock-flow-udig";
	argv = (
		"put"
	);
}

#  sync wrapped blobs to remote blobio bio4d server.
#  typically ssh tunnel to remote bio4d server.

command sync_wrap
{
	path = "sync-wrap";
	argv = (
		"{REMOTE_BLOBIO_SERVICE}"
	);
	exit_status is OK when in {0};
}

command brr_blob_existed
{
	path = "true";
}

command brr_blob_taken
{
	path = "true";
}

tail brr
{
	path = "spool/bio4d.brr";
}

#
#  Test if the blob exists locally now, by executing
#
#	blobio eat --service $BLOBIO_SERVICE --udig <udig>
#
command eat_local
{
	path = "blobio";
	argv = (
		"eat",
		"--service",
		"{BLOBIO_SERVICE}",
		"--udig"
	);
	exit_status is OK when in {0, 1};
}

#
#  Zap a remote blob by executing take on remote server.
#
#	blobio take --service bio4:lct:1797	 		\
#			--output-path /dev/null				\
#			--udig sha:a8872ee1db693bf221d33228c920c73ae76c0d60
#  Note:
#	A blob zap can be expensive, since the bio4 protocol requires copying
#	the taken blob over the network.  Eventually a full blown
#	sync protocol will replace this flowd implementation.
#

command sync_zap
{
	path = "blobio";
	argv = (
		"take",
		"--service",
		"{REMOTE_BLOBIO_SERVICE}",
		"--output-path",
		"/dev/null",
		"--udig"
	);
}

#
#  The blob existed according to blob request record.
#
#  Note:
#	Including the "eat" verb means we could get into loops with the 
#	remote server when it probes with an "eat".  Unfortunatly, the brr
#	tuple only has the ipaddress in the transport field, which is
#	problematic.  More thinking needed here.
#

call brr_blob_existed()
  when
	(
		brr.verb == "put"
		or
		brr.verb == "get"
		or
		brr.verb == "give"
		or
		brr.verb == "wrap"
		or
		brr.verb == "roll"
	)
	and
	(
		brr.chat_history == "ok"
		or
		brr.chat_history == "ok,ok"
		or
		brr.chat_history == "ok,ok,ok"
	)
;

call brr_blob_taken()
  when
	brr.verb == "take"
	and
	brr.chat_history == "ok,ok,ok"
;

call eat_local(brr.udig)
  when
  	brr_blob_existed.exit_status == 0
	or
	brr_blob_taken.exit_status == 0
;

call eat_remote(brr.udig)
  when
  	brr_blob_existed.exit_status == 0
	or
	brr_blob_taken.exit_status == 0
;

call lock_put(brr.udig)
  when
  	brr_blob_existed.exit_status ==	0	#  brr proves exists
	and
	eat_local.exit_status == 0		#  exists locally
	and
	eat_remote.exit_status == 1		#  does not exist remotely
;
call sync_put(brr.udig)
  when
  	lock_put.exit_status == 0
;

call unlock_put(brr.udig)
  when
  	lock_put.exit_status == 0	#  this flow doing the "put"
	and
	(
		sync_put.exit_status == 0
		or
		sync_put.exit_status == 1
		or
		sync_put.exit_status == 2
		or
		sync_put.exit_status == 3
		or
		sync_put.exit_status == 32
	)
;

#  only zap the blob when it does not exist locally but does exist remotely

call sync_zap(brr.udig)
  when
  	brr_blob_taken.exit_status == 0		#  blob was taken at one time
	and
  	eat_local.exit_status == 1		#  does not exist locally
	and
	eat_remote.exit_status == 0		#  exists remotely
;


#  push all blobs in wrap set to remote server

call sync_wrap(brr.udig)
  when
	(
		brr.verb == "wrap"
		or
		brr.verb == "roll"
	)
	and
	brr.chat_history == "ok"
;
