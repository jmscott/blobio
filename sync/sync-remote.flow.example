#
#  Synopsis:
#	example remote sync template.  replace ${BLOBIO_*} vars
#

boot
{
	brr_capacity = 64;
	os_exec_capacity = 16;
	os_exec_worker_count = 16;
	flow_worker_count = 8;

	qdr_roll_duration = "24h";
	fdr_roll_duration = "24h";
	xdr_roll_duration = "24h";
	heartbeat_duration = "10s";
}

sync map seen_udig[string]bool;

#  remote blobio bio4d server.
#  typically ssh tunnel to remote bio4d server.

command eat_remote
{
	path = "blobio";
	argv = (
		"eat",
		"--service",
		"${BLOBIO_REMOTE_SERVICE}",
		"--udig"
	);
	exit_status is OK when in {0, 1};
}

#  put blob to remote blobio bio4d server.
#  typically ssh tunnel to remote bio4d server.

command sync_put
{
	path = "sync-put";
	argv = (
		"${BLOBIO_REMOTE_SERVICE}"
	);
	exit_status is OK when in {0, 1};
}

command first_seen
{
	path = "true";
}

tail brr
{
	path = "spool/bio4d.brr";
}

#
#  Test if the blob exists locally now, by executing
#
#	blobio eat --service $BLOBIO_SERVICE --udig <udig>
#
command eat_local
{
	path = "blobio";
	argv = (
		"eat",
		"--service",
		"${BLOBIO_GET_SERVICE}",
		"--udig"
	);
	exit_status is OK when in {0, 1};
}

call first_seen()
  when
  	seen_udig.LoadOrStore(brr.udig, true).loaded == false
;

call eat_local(brr.udig)
  when
  	first_seen.exit_status == 0
;

call eat_remote(brr.udig)
  when
  	eat_local.exit_status == 0
;

call sync_put(brr.udig)
  when
	eat_remote.exit_status == 1
;
