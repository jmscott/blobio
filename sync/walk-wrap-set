#!/usr/bin/env perl
#
#  Synopsis:
#	Transform a wrap-set(s) into set of udigs in service written to stdout.
#  Options:
#	--start-wrap-set <udig>
#	--stop-wrap-set <udig>
#	--trace-blob <udig>
#	--stop-brr-log-count
#  Usage:
#	#  See stats on entire chain of wrap-sets.
#	#  the start wrap set is derived by requesting a wrap/roll
#	#  on $BLOBIO_SERVICE
#
#	walk-wrap-set | grep '^#'
#
#	#  See stats bounded by two inclusive wrap sets
#
#	START_WRAP=bct20:983bb9f30c935600135c002e1974cf27fcf15cd8
#	STOP_WRAP=bct20:ee0fad120ce49e34b8d2c72c160c1a948c27d526
#	walk-wrap-set --start-wrap $START_WRAP --stop-wrap-set $STOP_WRAP
#
#	#  See blobs in service, according to the chain
#	walk-wrap-set | grep '^#'
#
#	walk-wrap-set --stop-brr-log-count 3
#  Note:
#	Each wrap set contains at least one wrap request record, describing
#	a previous wrap set.  The wrap record should not be assumed to be
#	the first record in the wrap blob.  Also, the udig for a roll request
#	may not even exist or be related to a recently seen wrap udig.
#
#	If a stop-wrap is specificed but does not exist in the block chain
#	then an error ought to occur, instead of walking to end of chain.
#	Not sure.
#
#	Sometimes the stop wrap set is same as start wrap set for 2 brr logs.
#
#		walk-wrap-set --stop-brr-log-count 2
#
$| = 1;

my $date = `date`;

use File::Temp;

my $prog = 'walk-wrap-set';

my (
	$start_wrap_set,
	$stop_wrap_set,
	$trace_blob,
	$stop_brr_log_count,
	%BRR_LOG,
	%UDIG,
	%WRAP_SET,
	$MIN_BRR_LOG_START_TIME,
	$MAX_BRR_LOG_START_TIME,
	$MIN_RECENT_TIME,
	$MAX_RECENT_TIME,
	%NO_BRR_LOG,
	%BLOB_SIZE,
	%TAKEN,
	%OK_VERB_COUNT,
	%NO_VERB_COUNT,
	%UDIG_AFTER,
	%NO_EXIST,
	%TRANSPORT_TCP4_SOURCE,
);

#  match a udig

my $UDIG_RE = qr{
	[a-z][a-z0-9]{0,7}			#  algorithm
		:
	[[:graph:]]{32,128}			#  digest
}sx;

#  match a blob request record in log file
my $BRR_RE = qr{

	#  start time of request: YYYY-MM-DDThh:mm:ss.ns[+-]HH:MM
	(2\d\d\d-				#  year
		(?:(?:0[0-9])|10|11|12)-	#  month
		(?:(?:[012][0-9])|30|31)T	#  day followed by T
		(?:[0-2]\d):			#  hour
		(?:[0-5]\d):			#  minute
		(?:[0-5]\d)\.			#  second
		(?:\d{1,9})			#  nanoseconds
		[+-]\d\d:\d\d			#  time zone offset
	)
						\t
	#  transport name~parameter
	([a-z][a-z0-9]{0,7}~[[:graph:]]{1,128})
						\t
	#  request verb
	(get|put|give|take|eat|wrap|roll)
						\t
	#  uniform digest
	([a-z][a-z0-9]{0,7}:[[:graph:]]{32,128})
						\t
	#  chat history
	(ok|(?:ok,ok)|(?:ok,ok,ok)|no|(?:ok,no)|(?:ok,ok,no))
						\t
	#  blob size
	(\d{1,19})				\t

	#  wall time duration: sec32.nsec
	\d{1,10}\.\d{9}
						\n
}sx;

$SIG{__DIE__} = sub
{
	printf STDERR "$prog: ERROR: @_\n";
	exit 8;
};

my $BLOBIO_SERVICE = $ENV{BLOBIO_SERVICE};
die 'environment variable not defined: BLOBIO_SERVICE' unless $BLOBIO_SERVICE;
my $SERVICE = "--service $BLOBIO_SERVICE";
my $BLOBIO_GET_SERVICE = $ENV{BLOBIO_GET_SERVICE} ?
				$ENV{BLOBIO_GET_SERVICE} :
				$ENV{BLOBIO_SERVICE}
;
my $GET_SERVICE = "--service $BLOBIO_GET_SERVICE";

chomp $date;
print <<END;
#  BlobIO Walk Wrap Set: $date
#
#  BLOBIO_SERVICE: $BLOBIO_SERVICE
#  BLOBIO_GET_SERVICE: $BLOBIO_GET_SERVICE
END

my $tmp_file = File::Temp->new()->filename;
die "can not create temp file name: $!" unless $tmp_file;
print <<END;
#  Temp Work File: $tmp_file
END

#  $0 occured after $1, i.e, $0 is "younger" than $1
sub udig_after
{
	die 'udig_after: empty tuples' unless $_[0] && $_[1];
	my $after = "$_[0]	$_[1]";

	return if $UDIG_AFTER{$after};
	$UDIG_AFTER{$after} = 1;
}

#
#  Verify the wrap set of udigs is valid by extracting udigs or croak.
#  Return a reference to %hash of udigs in wrap set.
#
sub frisk_wrap_set
{
	my ($wrap_set) = @_;

	return $WRAP_SET{$wrap_set} if $WRAP_SET{$wrap_set};

	my $UDIG = "--udig $wrap_set";

	my $status = system("blobio empty $UDIG") >> 8;
	die "unexpected frisk empty udig: $wrap_set" if $status == 0;

	die "blobio frisk empty failed: exit status=$status" if $status != 1;

	my $EAT;
	$status = system("blobio eat $UDIG $GET_SERVICE");
	die "blobio eat frisk failed: exit status=$status" if $status > 1;

	my %ELEMENTS;
	$WRAP_SET{$wrap_set} = \%ELEMENTS;
	return \%ELEMENTS if $status == 1;

	#
	#  Open the wrap set of udigs.
	#
	#  Note:
	#	What if the set does not exist?
	#
	my $WRAP_SET;
	open($WRAP_SET, "blobio get $UDIG $GET_SERVICE |") or
				die("open(blobio frisk wrap set) failed: $!");

	#  scan the udig set for correctness
	while (<$WRAP_SET>) {
		chomp;
		die "blob is not udig set: $_" unless m/^${UDIG_RE}$/;
		die "udig set has a duplicate: $_" if $ELEMENTS{$_};
		$ELEMENTS{$_} = 1;

		udig_after $wrap_set, $_;
	}
	close($WRAP_SET) or die "close(frisk udig set) failed: $!";
	$UDIG{$wrap_set} = 1;
	return $WRAP_SET{$wrap_set};
}

die "wrong number arguments: got ", scalar(@ARGV), ', expected 0'
			unless @ARGV == 0 || @ARGV == 2 || @ARGV == 4
;
die 'environment var not defined: BLOBIO_SERVICE' unless $ENV{BLOBIO_SERVICE};

sub opt_die
{
	my $opt = shift @_;
	die "option --$opt ", join(': ', @_);
}

$OK_VERB_COUNT{get} =
	$OK_VERB_COUNT{put} =
	$OK_VERB_COUNT{give} =
	$OK_VERB_COUNT{take} =
	$OK_VERB_COUNT{wrap} =
	$OK_VERB_COUNT{roll} =
	$OK_VERB_COUNT{eat} =
	0
;

$NO_VERB_COUNT{get} =
	$NO_VERB_COUNT{put} =
	$NO_VERB_COUNT{give} =
	$NO_VERB_COUNT{take} =
	$NO_VERB_COUNT{wrap} =
	$NO_VERB_COUNT{roll} =
	$NO_VERB_COUNT{eat} =
	0
;

while (@ARGV > 0) {
	my $arg = shift @ARGV;

	if ($arg eq '--start-wrap-set') {
		#  Note: uggh, no proper closure in older perl!
		sub _die2 {
			opt_die 'start-wrap-set', @_;
		}

		_die2 'defined more than once' if $start_wrap_set;
		$start_wrap_set = shift @ARGV;

		_die2 'not a udig', $start_wrap_set
				unless $start_wrap_set =~ m/^${UDIG_RE}$/
		;
	} elsif ($arg eq '--stop-wrap-set') {
		#  Note: uggh, no proper closure in older perl!
		sub _die3 {
			opt_die 'stop-wrap-set', @_;
		}

		_die3 'defined more than once' if $stop_wrap_set;
		$stop_wrap_set = shift @ARGV;

		_die3 'not a udig', $stop_wrap_set
				unless $stop_wrap_set =~ m/^${UDIG_RE}$/
		;
	} elsif ($arg eq '--trace-blob') {
		sub _die4 {
			opt_die 'trace-blob', @_;
		}

		_die4 'defined more than once' if $trace_blob;
		$trace_blob = shift @ARGV;
		_die4 'not a udig', $trace_blob
				unless $trace_blob =~ m/^${UDIG_RE}$/
		;

	} elsif ($arg eq '--stop-brr-log-count') {
		sub _die5 {
			opt_die 'stop-brr-log-count', @_;
		}

		_die5 'defined more than once' if $stop_brr_log_count;
		$stop_brr_log_count = shift @ARGV;

		_die5 'not a u32 count', $stop_brr_log_count
				unless $stop_brr_log_count =~ m/^[0-9]{1,19}$/;
		;
	} elsif ($arg =~ m/^--/) {
		die "unknown option: $arg";
	} else {
		die "unknown command line argument: $arg";
	}
}

#  if no wrap set then start with fresh wrap/roll

unless ($start_wrap_set) {
	my $TAIL_WRAP;
	open($TAIL_WRAP, "blobio wrap $SERVICE |") or
					die "open(blobio wrap) failed: $!";
	my $tail_wrap_set = <$TAIL_WRAP>;
	close($TAIL_WRAP) or die "close(blobio wrap) failed: $!";
	chomp $tail_wrap_set;

	die 'tail wrap set is not udig' unless $tail_wrap_set =~m/^${UDIG_RE}$/;
	print <<END;
#  Tail Wrap Set: $tail_wrap_set
END

	my $status = system("blobio roll --udig $tail_wrap_set $SERVICE");
	print <<END;
#  Roll Exit Status: $status
#
END
	$start_wrap_set = $tail_wrap_set;
	die "blobio roll failed: exit status=$status" if $status;
}

print <<END;
#  Start Wrap Set: $start_wrap_set
END

print <<END if $stop_wrap_set;
#  Stop Wrap Set: $stop_wrap_set
END

my $wrap_set = $start_wrap_set;

#  the wrap/roll sets are not ordered, so scan brr logs looking for wrap/roll
#  requests to build an "after" order relation on udigs.

my $oldest_wrap_set;
my @wrap_set;
push @wrap_set, $wrap_set;

while (@wrap_set > 0) {

	$wrap_set = pop @wrap_set;

	#  cheap sanity test
	die "tail wrap set seen twice: $wrap_set" if $WRAP_SET{$wrap_set} > 0;

	my $ELEMENTS = frisk_wrap_set($wrap_set);

	#  no elements in the udig set

	if (%$ELEMENTS == 0) {
		$oldest_wrap_set = $wrap_set;
		@wrap_set = ();
		last;
	}

	#  scan the brr logs for timestamped udigs

	foreach my $brr_log (keys %${ELEMENTS}) {
		
		next if $BRR_LOG{$brr_log};		#  an error if exists?
		$BRR_LOG{$brr_log} = 1;

		udig_after $wrap_set, $brr_log;

		my $command = 'blobio get '				.
			      "--udig $brr_log "			.
			      $GET_SERVICE				.
			      " --output-path $tmp_file"
		;
		if (my $status = system($command)) {
			$status >>= 8;
			die "blobio get brr log failed: exit status=$status"
				unless $status == 1
			;
			print "#  NO BRR Log: $brr_log\n"
					unless $NO_BRR_LOG{$brr_log};
			$NO_BRR_LOG{$brr_log} = 1;
			next;
		}

		my $BRR_LOG;
		open($BRR_LOG, "<$tmp_file") or
					die "open(tmp brr log) failed: $!";
		my $rc = 0;
		while (<$BRR_LOG>) {
			$rc++;
			die "row $rc is not brr in log: $brr_log"
							unless m/^${BRR_RE}$/;
			my $start_time = $1;
			my $transport = $2;
			my $verb = $3;
			my $udig = $4;
			my $chat_history = $5;

			print <<END if $trace_blob eq $udig;
#
#  Trace: UDig: $udig
#  Trace: BRR: $brr_log
#  Trace: Row Count: $rc
#  Trace: Start Time: $start_time
#  Trace: Verb/Chat: $verb/$chat_history
#
END

			#  Note: what about fs:/ service?
			++$TRANSPORT_TCP4_SOURCE{"$1 answered $2"}
				if $transport =~/^tcp4~([^:]+):\d+;(.*)/
			;

			#  Looking for a wrap/roll blob
			next if $chat_history =~ /no$/ ||
					($verb ne 'wrap' && $verb ne 'roll')
			;

			udig_after $udig, $brr_log;

			next unless ($verb eq 'roll' || $verb eq 'wrap') 
					&& $chat_history eq 'ok';

			unless ($WRAP_SET{$udig}) {
				push @wrap_set, $udig;
				udig_after $udig, $wrap_set;
			}
		}
		close($BRR_LOG) or die "close(blobio get brr log) failed: $!";
		unlink($tmp_file) or die "unlink(tmp brr log) failed: $!";
		if (
			$stop_brr_log_count > 0				&&
			scalar(%BRR_LOG) >= $stop_brr_log_count
		){
			undef @wrap_set;
			last;
		}
	}
	$oldest_wrap_set = $wrap_set;
}

print <<END;
#  Oldest Wrap Set: $oldest_wrap_set
END

unless ($stop_wrap_set) {
	$stop_wrap_set = $oldest_wrap_set;
	print <<END;
#  Stop Wrap Set (Oldest): $stop_wrap_set
END
}

#
#  Topologically sort the udigs to determine order of scanning
#  the brr log files.  We do this because the wrap_set is not ordered
#  by time (or any order).
#
my $AFTER;
open($AFTER, ">$tmp_file") or die "open($tmp_file) failed: $!";
print $AFTER $_, "\n" foreach keys %UDIG_AFTER;
close($AFTER) or die "close($tmp_file) failed: $!";

my $TSORT;
open($TSORT, "tsort $tmp_file |") or die "open(tsort |) failed: $!";

my @BRR_LOG;
while (<$TSORT>) {
	chomp;
	push @BRR_LOG, $_ if $BRR_LOG{$_};
}
close($TSORT) or die "close(tsort) failed: $!";
unlink($tmp_file) or die "unlink(tmp after) failed: $!";

@BRR_LOG = reverse @BRR_LOG;

foreach my $brr_log (@BRR_LOG) {

	my $command = 'blobio get '				.
		      "--udig $brr_log "			.
		      $GET_SERVICE				.
		      " --output-path $tmp_file"
	;
	if (my $status = system($command)) {
		$status >>= 8;
		die "blobio get brr log failed: exit status=$status"
					unless $status == 1
		;
		next;
	}

	my $BRR_LOG;
	open($BRR_LOG, "<$tmp_file") or die "open(tmp brr log) failed: $!";

	#  slurp up brr records
	my @BRR = <$BRR_LOG>;
	close $BRR_LOG or die "close(tmp brr) failed: $!";
	unlink $tmp_file or die "unlink(tmp brr) failed: $!";

	my $rc = @BRR;

	#
	#  loop through individual brr records in reverse time order.
	#  the most recent record in row order (not start_time) determines
	#  if the blob exists or not.
	#
	#  Note:
	#	the row order algorithm is not quite correct, since, in theory,
	#	an "eat" of a non-existent blob could start before
	#	but finish after a simultaneous ok "put" of the same blob.
	#	the row order might see the failed "eat" after the
	#	succesfull put.  fortunatley in typical use the "eat"
	#	is invoked sequentially before the "put" in the same
	#	code:
	#
	#		blobio eat ...
	#		if not exists then
	#			blobio put
	#
	#	but, in principal, the algorithm is incorrect.
	#
	foreach (reverse @BRR) {
		die "row $rc is not brr in log: $brr_log" unless m/^${BRR_RE}$/;
		my $start_time = $1;
		my $transport = $2;
		my $verb = $3;
		my $udig = $4;
		my $chat_history = $5;
		my $blob_size = $6;

		#  find the bounds for the start times for the whole brr log

		$MAX_BRR_LOG_START_TIME = $start_time
		  if
		  	$MAX_BRR_LOG_START_TIME eq ''
			or
		  	$start_time gt $MAX_BRR_LOG_START_TIME
		;
		$MIN_BRR_LOG_START_TIME = $start_time
		  if
		  	$MIN_BRR_LOG_START_TIME eq ''
			or
		  	$start_time le $MIN_BRR_LOG_START_TIME
		;
		++$TRANSPORT_TCP4_SOURCE{"$1 answered $2"}
					if $transport =~/^tcp4~([^:]+):\d+;(.*)/
		;

		if ($chat_history =~ /no$/) {
			$NO_VERB_COUNT{$verb}++;
			$NO_EXIST{$udig} = 1
				if $UDIG{$udig} eq ''			&&
				(
				   	$verb eq 'eat'			||
					$verb eq 'get'
				)
			;
			next;
		}

		$OK_VERB_COUNT{$verb}++;

		#  blob was taken succesfully, so does not exist
		#
		#  Note: could a taken wrap set be tagged prematuraly in %UDIG?

		if ($verb eq 'take') {
			#  flag as taken unless seen more recently
			$NO_EXIST{$udig} = $TAKEN{$udig} = 1
						unless $UDIG{$udig};
			next;
		}
		$MAX_RECENT_TIME = $start_time
		  if
		  	$MAX_RECENT_TIME eq ''
			or
		  	$start_time gt $MAX_RECENT_TIME
		;
		$MIN_RECENT_TIME = $start_time
		  if
		  	$MIN_RECENT_TIME eq ''
			or
		  	$start_time le $MIN_RECENT_TIME
		;
		next if $TAKEN{$udig} || $NO_EXIST{$udig};
		$UDIG{$udig} = 1;
		$BLOB_SIZE{$udig} = $blob_size
			if
				$verb eq 'get'			||
				$verb eq 'put'			||
				$verb eq 'give'
		;
		--$rc;
	}
}

my $sum_blob_size = 0;
for my $udig (keys %UDIG) {
	$sum_blob_size += $BLOB_SIZE{$udig};
	print $udig, "\n";
}

my $brr_log_count = scalar(keys %BRR_LOG);
my $udig_count = scalar(keys %UDIG);
my $no_brr_log_set_count = scalar(keys %NO_BRR_LOG);
my $taken_count = scalar(keys %TAKEN);
my $no_exist_count = scalar(keys %NO_EXIST);

my $average_blob_size = 0;
$average_blob_size = pretty_size($sum_blob_size / $udig_count)
						if $udig_count > 0
;
$date = `date`;
chomp $date;

sub pretty_size
{
	my $size = $_[0];

	return sprintf('%.0fTB', $size / 1099511627776)
						if $size >=1099511627776;
	return sprintf('%.0fGB', $size / 1073741824)
						if $size >= 1073741824;
	return sprintf('%.0fMB', $size / 1048576)
						if $size >= 1048576;
	return sprintf('%.0fKB', $size / 1024) if $size >= 1024;
	return "$size bytes";
}

my $pretty_sum_blob_size = pretty_size $sum_blob_size;

for (keys %TAKEN) {
	print <<END;
#  Take: $_
END
}

print <<END;
#
#  Min Recent Time: $MIN_RECENT_TIME
#  Max Recent Time: $MAX_RECENT_TIME
#
#  Min BRR Log Start Time: $MIN_BRR_LOG_START_TIME
#  Max BRR Log Start Time: $MAX_BRR_LOG_START_TIME
#
#  BRR Log Count: $brr_log_count logs
#
#  Eat Ok Count: $OK_VERB_COUNT{eat}
#  Get Ok Count: $OK_VERB_COUNT{get}
#  Put Ok Count: $OK_VERB_COUNT{put}
#  Give Ok Count: $OK_VERB_COUNT{give}
#  Take Ok Count: $OK_VERB_COUNT{take}
#  Wrap Ok Count: $OK_VERB_COUNT{wrap}
#  Roll Ok Count: $OK_VERB_COUNT{roll}
#  No Exist Count: $no_exist_count
#
#  Eat No Count: $NO_VERB_COUNT{eat}
#  Get No Count: $NO_VERB_COUNT{get}
#  Put No Count: $NO_VERB_COUNT{put}
#  Give No Count: $NO_VERB_COUNT{give}
#  Take No Count: $NO_VERB_COUNT{take}
#  Wrap No Count: $NO_VERB_COUNT{wrap}
#  Roll No Count: $NO_VERB_COUNT{roll}
#
#  UDig Count: $udig_count blobs
#  Total Blob Size: $pretty_sum_blob_size ($sum_blob_size bytes)
#  Average Blob Size: $average_blob_size bytes
#  No BRR Log Count: $no_brr_log_set_count blobs
#  Taken Count: $taken_count blobs
#
#  Transport TCP4 Source:
END
print <<END for sort keys %TRANSPORT_TCP4_SOURCE;
#	$_ $TRANSPORT_TCP4_SOURCE{$_} requests
END

print <<END;
#
#  Job End Time: $date
#
END

exit 0;
